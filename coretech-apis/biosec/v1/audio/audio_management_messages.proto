/*-
 * #%L
 * gatekeeper-api-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.audio;

option java_package = "com.nuance.rpc.biosec.v1.audio";
option java_multiple_files = true;

import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "nuance/biosec/v1/common_types.proto";
import "nuance/biosec/v1/deviceprint/deviceprints_common_types.proto";
import "nuance/rpc/status.proto";

////////////////////
// Audio Formats ///
////////////////////

// The audio format of the media segment.
message AudioFormat {
  oneof audio_format {
    // Signed 16-bit little endian PCM
    PCM pcm = 1;
    // G.711 A-law, 8kHz
    ALaw alaw = 2;
    // G.711 Mu-law, 8kHz
    ULaw ulaw = 3;
    // Mp3
    Mp3 mp3 = 4;
    // G729/G729A
    G729 g729 = 5;
  }
  // Number of channels. i.e. mono audios have one channel, while stereo audios have 2 channels.
  uint32 number_of_channels = 100;
}

// PCM audio format
message PCM {
  // Audio sample rate. Default 0, meaning 8000.
  uint32 sample_rate_hz = 1;
}

// ALaw audio format. G.711 audio formats are set to 8kHz.
message ALaw {
}

// ULaw audio format. G.711 audio formats are set to 8kHz.
message ULaw {
}

// The input message that defines the G729/G729A audio format. By default, the G.729/G.729A audio format is set to 8kHz.
message G729 {
}

// Encoding engine quality
enum EncodingEngineQuality {
  // Encoding quality engine is not specified.
  ENCODING_ENGINE_QUALITY_UNSPECIFIED = 0;
  // Encoding quality engine is 'Fast'.
  ENCODING_ENGINE_QUALITY_FAST = 1;
  // Encoding quality engine is 'Standard'.
  ENCODING_ENGINE_QUALITY_STANDARD = 2;
  // Encoding quality engine is 'High'.
  ENCODING_ENGINE_QUALITY_HIGH = 3;
}

enum Target {
  // Target is not specified.
  TARGET_UNSPECIFIED = 0;
  // Target is quality.
  TARGET_QUALITY = 1;
  // Target is bitrate.
  TARGET_BITRATE = 2;
}

// The audio file type.
enum Container {
  // The audio file type is not specified.
  CONTAINER_UNSPECIFIED = 0;
  // The audio file type is raw.
  CONTAINER_RAW = 1;
  // The audio file type is wav.
  CONTAINER_WAV = 2;
  // The audio file type is mp3.
  CONTAINER_MP3 = 3;
}

// MP3 audio format
message Mp3 {
  // Optimize for quality or bitrate.
  Target target = 1;
  // Bitrate in kbit/sec (Only valid if target is bitrate, for CBR one of 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256 or 320)
  uint32 bitrate = 2;
  // Enforces constant bitrate encoding (Only valid if target is bitrate)
  bool cbr = 3;
  // VBR Quality from 0 to 10, 0 being the best (Only valid if target is quality)
  float quality = 4;
  // Enforces mono encoding
  bool mono = 5;
  // Quality/speed of the encoding engine, this does not affect the bitrate!
  EncodingEngineQuality encoding_engine_quality = 6;
}


///////////////////
// Audio Feeding //
///////////////////

// Input message that defines parameters for [GetUploadUrl](#GetUploadUrl).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Mandatory
// * gk_session_id: Mandatory
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetUploadUrlRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Optional if uploading a wav file. Mandatory when uploading a header-less audio file.
  AudioFormat format  = 2;
  // Mandatory. Specifies the audio file's type.
  Container container = 3;
  // Optional. Call parties attributes.
  repeated PartyAttributes call_parties = 4;
}

// Output message that defines parameters returned by [GetUploadUrl](#GetUploadUrl).
message GetUploadUrlResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1; 
  // Optional. URL for uploading media.
  string media_upload_url = 2;                          
  // Optional. Uploaded media's unique Media Segment ID for use in other API methods.
  nuance.biosec.v1.UniqueId gk_media_segment_id = 3;
}

// Input message that defines parameters for [GetDownloadUrl](#GetDownloadUrl).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetDownloadUrlRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique ID of the media segment to download.
  nuance.biosec.v1.UniqueId gk_media_segment_id = 2;
  // Optional. The audio format.
  AudioFormat format = 3;
  // Optional. Specifies the audio file's type.
  Container container = 4;
  // Optional. Specify the channel to download when only one channel of a stereo media is needed. For stereo, left is channel 1 and right is channel 2. When not specified, all channels are downloaded.
  nuance.biosec.v1.AudioChannelSelector channel_selector = 5;
}

// Output message that defines parameters returned by [GetDownloadUrl](#GetDownloadUrl).
message GetDownloadUrlResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1; 
  // Optional. URL for downloading media.
  string media_download_url = 2;  
}

//////////////////////
// Audio management //
//////////////////////

// Input message that defines parameters for [GetProcessedAudioDetails](#GetProcessedAudioDetails).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetProcessedAudioDetailsRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique ID of the processed audio.
  nuance.biosec.v1.UniqueId gk_processed_audio_id = 2;
  // Optional. A field mask used to specify the [ProcessedAudioDetailsForRead](#nuance.biosec.v1.audio.ProcessedAudioDetailsForRead) fields that the method reads.
  google.protobuf.FieldMask field_mask = 3;               
}

// Output message that defines parameters returned by [GetProcessedAudioDetails](#GetProcessedAudioDetails).
message GetProcessedAudioDetailsResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;    
  // Optional. Audio details.
  ProcessedAudioDetailsForRead details = 2;
  // Optional. ID of the media segment that is used to generate gk_processed_audio_id.
  nuance.biosec.v1.UniqueId gk_media_segment_id = 3;
}


// Input message that defines parameters for [UpdateProcessedAudioDetails](#UpdateProcessedAudioDetails).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Mandatory
// * gk_session_id: Mandatory
// * gk_scope_id: Mandatory
// * configset_id: Not used
message UpdateProcessedAudioDetailsRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique ID of the processed audio.
  nuance.biosec.v1.UniqueId gk_processed_audio_id = 2;
  // Mandatory. Fields that the method sets or updates.
  ProcessedAudioDetailsForWrite details = 3;
  // Mandatory. A field mask used to specify the [ProcessedAudioDetailsForWrite](#nuance.biosec.v1.audio.ProcessedAudioDetailsForWrite) fields to set.
  google.protobuf.FieldMask field_mask = 4;               
}

// Output message that defines parameters returned by [UpdateProcessedAudioDetails](#UpdateProcessedAudioDetails).
message UpdateProcessedAudioDetailsResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;   
}

// Input message that defines parameters for [GetMediaSegmentDetails](#GetMediaSegmentDetails).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetMediaSegmentDetailsRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique ID of the media segment.
  nuance.biosec.v1.UniqueId gk_media_segment_id = 2;
  // Optional. A field mask used to specify the [MediaSegmentDetailsForRead](#nuance.biosec.v1.audio.MediaSegmentDetailsForRead) fields that the method reads.
  google.protobuf.FieldMask field_mask = 3;
}

// Output message that defines parameters returned by [GetMediaSegmentDetails](#GetMediaSegmentDetails).
message GetMediaSegmentDetailsResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;
  // Optional. Media segment's details.
  MediaSegmentDetailsForRead details = 2;
}

// Input message that defines parameters for [UpdateMediaSegmentDetails](#UpdateMediaSegmentDetails).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Mandatory
// * gk_session_id: Mandatory
// * gk_scope_id: Mandatory
// * configset_id: Not used
message UpdateMediaSegmentDetailsRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique ID of the media segment.
  nuance.biosec.v1.UniqueId gk_media_segment_id = 2;
  // Mandatory. Fields that the method sets or updates.
  MediaSegmentDetailsForWrite details = 3;
  // Mandatory. A field mask used to specify the [MediaSegmentDetailsForWrite](#nuance.biosec.v1.audio.MediaSegmentDetailsForWrite) fields to set.
  google.protobuf.FieldMask field_mask = 4;
}

// Output message that defines parameters returned by [UpdateMediaSegmentDetails](#UpdateMediaSegmentDetails).
message UpdateMediaSegmentDetailsResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;
}

//////////////////
// Global Types //
//////////////////

// Contains the readable fields of the Processed Audio. Included in [GetProcessedAudioDetailsResponse](#nuance.biosec.v1.audio.GetProcessedAudioDetailsResponse).
// Only fields that match the [GetProcessedAudioDetailsRequest](#google.protobuf.FieldMask) are returned. If no mask is specified, all fields are returned.
message ProcessedAudioDetailsForRead {
  // Optional. Unique ID of the calibration model that the system used to create the audio model.
  nuance.biosec.v1.UniqueId gk_calibration_model_revision_id = 1;
  // Optional. Unique ID of the calibration model that the system used to perform channel playback detection.
  nuance.biosec.v1.UniqueId gk_playback_calibration_model_revision_id = 2;
  // Optional. Processed audio recording details.
  RecordingAttributes processed_audio_attributes = 4;
  // Optional, there is only one of them, according to processing type.
  oneof attributes
  {
    // Optional. Audio processing details.
    ProcessingAttributes processing_attributes = 5;
    // Optional. Audio processing details specific for deviceprint operations.
    DeviceprintProcessingAttributes deviceprint_processing_attributes = 11;
  }
  // Optional. A score between 0 and 100 that can be used to categorize voices into classes according to various factors such as timbre, pitch, and so on.
  google.protobuf.FloatValue voice_class_score = 6;
  // Optional. The language spoken in the audio. This info is provided by the client.
  string actual_language = 7;
  // Optional. Date and time of the processed audio segment creation.
  google.protobuf.Timestamp creation_timestamp = 997;  
  // Optional. Date and time of last modification.
  google.protobuf.Timestamp modification_timestamp = 998;    
  // Optional. Custom application data in a list of key-value pairs.
  map<string,string> custom_data = 999;
}

// Contains information about the processed audio recording. Included in [GetProcessedAudioDetailsResponse](#nuance.biosec.v1.audio.GetProcessedAudioDetailsResponse).
message RecordingAttributes {
  // Optional. Number of audio samples per second.
  google.protobuf.Int32Value sample_rate_hz = 1;
  // Optional. Number of recording channels (1 for Mono, 2 for Stereo).
  google.protobuf.Int32Value number_of_channels = 2;
  // Optional. Specifies the processed channel when processing media with multiple channels. This parameter is not set if the media has a single channel.
  nuance.biosec.v1.AudioChannelSelector selected_channel = 10;
}

// Contains information about the processed audio. Included in [GetProcessedAudioDetailsResponse](#nuance.biosec.v1.audio.GetProcessedAudioDetailsResponse).
message ProcessingAttributes {
  // Optional. Amount of gross audio.
  google.protobuf.Duration gross_audio = 1;
  // Optional. Amount of net audio.
  google.protobuf.Duration net_audio = 2;
  // Optional. The SNR (Signal to noise ratio) value of the audio in dB.
  google.protobuf.FloatValue snr_db = 3;
  // Optional. A measure related to the estimated power of the speech signal. Lower values mean that the signal level is softer.
  google.protobuf.FloatValue speech_level = 4;
  // Optional. The number of saturated audio samples for one minute of speech.
  google.protobuf.FloatValue saturation_level = 5;
  // Optional. Synthetic Speech Detection score.
  google.protobuf.FloatValue synthetic_score = 6;
  // Optional. Channel Playback Detection score.
  google.protobuf.FloatValue channel_playback_score = 7;
  // Optional. Version of the playback algorithm used to compute the score.
  google.protobuf.Int32Value playback_version = 8;
}

// Contains information about the processed audio. Included in [GetProcessedAudioDetailsResponse](#nuance.biosec.v1.audio.GetProcessedAudioDetailsResponse).
message DeviceprintProcessingAttributes {
  // Optional. Amount of gross audio.
  google.protobuf.Duration gross_audio = 1;
  // Optional. Amount of net audio.
  google.protobuf.Duration net_audio = 2;
  // Optional. Amount of audio containing everything that is not speech, like noise and silence.
  google.protobuf.Duration not_speech = 3;
  // Optional. The SNR (Signal to noise ratio) value of the audio in dB.
  google.protobuf.FloatValue snr_db = 4;
  // Optional. A measure related to the estimated power of the speech signal. Lower values mean that the signal level is softer.
  google.protobuf.FloatValue speech_level = 5;
  // Optional. The number of saturated audio samples for one minute of speech.
  google.protobuf.FloatValue saturation_level = 6;
  // Optional. Pesq: a number in range 0-5, 0 means noise ony, 5 means perfect quality of speech
  google.protobuf.FloatValue perceptual_speech_quality = 10;
  // Optional. Packet loss rate expressed as percentage.
  google.protobuf.FloatValue packet_loss_rate = 11;
  // Optional. Telephony channel identification scores.
  repeated nuance.biosec.v1.deviceprint.TelephonyChannelScore channel_scores = 12;
}

// Contains the writable fields of the processed audio segment. Included in [UpdateProcessedAudioDetailsRequest](#nuance.biosec.v1.audio.UpdateProcessedAudioDetailsRequest).
// Provide fields that match [UpdateProcessedAudioDetailsRequest](#google.protobuf.FieldMask).
message ProcessedAudioDetailsForWrite {
  // The language spoken in the audio. This info is provided by the client.
  string actual_language = 1;
  // Custom application data in a list of key-value pairs.
  map<string,string> custom_data = 999;    
}

// Contains the readable fields of the media segment. Included in [GetMediaSegmentDetailsResponse](#nuance.biosec.v1.audio.GetMediaSegmentDetailsResponse).
// Only the fields that match the [GetMediaSegmentDetailsRequest](#google.protobuf.FieldMask) are returned. If no mask is specified, all fields are returned.
message MediaSegmentDetailsForRead {
  // Optional. The unique ID of the person owning the media segment.
  nuance.biosec.v1.UniqueId gk_person_id = 1;
  // Optional. Determined if the media should be kept due to a regulatory requirement.
  google.protobuf.BoolValue legal_hold = 2;
  // Optional. Amount of gross audio collected. This represents the actual recording duration excluding the time the call was on hold.
  google.protobuf.Duration media_length = 3;
  // Optional. Number of audio samples per second.
  google.protobuf.Int32Value sample_rate_hz = 4;
  // Optional. Number of recording channels (1 for Mono, 2 for Stereo).
  google.protobuf.Int32Value number_of_channels = 5;
  // Optional. Parties attributes.
  repeated PartyAttributes call_parties = 6;
  // Optional. The type of the call.
  CallType call_type = 7;
  // Optional. List of redacted intervals for all channels.
  repeated Interval redacted_intervals = 8;
  // Optional. List of masked intervals for all channels.
  repeated Interval masked_intervals = 9;

  // Optional. Custom application data in a list of key-value pairs.
  map<string,string> custom_data = 999;
}

// Attributes of a call party.
message PartyAttributes {
  // Optional. The channel index. Valid values are between 1 and the number of channels.
  int32 channel_index = 1;
  // Optional. The party type.
  PartyType party_type = 2;
  // Optional. The ID associated with this party.
  nuance.biosec.v1.UniqueId gk_party_id = 3;
}

// The party type.
enum PartyType {
  // Party type is not set.
  PARTY_TYPE_UNSPECIFIED = 0;
  // Party type is agent.
  PARTY_TYPE_AGENT = 1;
  // Party type is person.
  PARTY_TYPE_PERSON = 2;
  // Party type is IVR.
  PARTY_TYPE_IVR = 3;
  // Party type is other.
  PARTY_TYPE_OTHER = 999;
}


// Contains parameters that define an interval.
message Interval {
  // Mandatory. Marks the beginning of the media interval.
  google.protobuf.Duration start_offset = 1;
  // Optional. Marks the end of the media interval.
  // When not set, the interval stops at the end of media segment and must be the last interval in the list.
  google.protobuf.Duration end_offset = 2;
  // Mandatory. Specifies the interval's media channel.
  uint32 channel = 3;
}

// Contains the writable fields of the media segment. Included in [UpdateMediaSegmentDetailsRequest](#nuance.biosec.v1.audio.UpdateMediaSegmentDetailsRequest).
// Provide fields that match [UpdateMediaSegmentDetailsRequest](#google.protobuf.FieldMask).
message MediaSegmentDetailsForWrite {
  // Optional. The unique ID of the person owning the media segment.
  nuance.biosec.v1.UniqueId gk_person_id = 1;
  // Optional. Determined if the media should be kept due to a regulatory requirement.
  google.protobuf.BoolValue legal_hold = 2;
  // Optional. Custom application data in a list of key-value pairs.
  map<string,string> custom_data = 999;
}
