/*-
 * #%L
 * agent-session-manager-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.managers.asm;

// The nuance.biosec.v1.managers.asm package contains the Agent Session Manager (ASM) API.

option java_multiple_files = true;
option java_package = "com.nuance.rpc.biosec.v1.managers.asm";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "nuance/biosec/v1/common_types.proto";
import "nuance/rpc/status.proto";
import "google/api/annotations.proto";

// Agent Session Manager service API. 
// Allows performing agent session related operations. 
service AgentSessionManager {

  // This server-streaming method establishes an agent session that allows the client to monitor 
  // the agent's extension for call events (agent login).
  rpc StartAgentSession (StartAgentSessionRequest) returns (stream StartAgentSessionResponse) {
    option (google.api.http) = {
      post: "/v1/agent-sessions:startAgentSession"
      body: "*"
    };
  };

  // This unary method terminates an agent session. As a result, all monitoring of the agent's extension is stopped (agent logout).
  rpc StopAgentSession (StopAgentSessionRequest) returns (StopAgentSessionResponse) {
    option (google.api.http) = {
      post: "/v1/agent-sessions/{agent_session_id}:stopAgentSession"
      body: "*"
    };
  };

}

// Input message that defines parameters for [StartAgentSession](#StartAgentSession).
message StartAgentSessionRequest {
  // Mandatory. General request context.
  Context context = 1;
  // Mandatory. Specifies the agent extension that is monitored for CTI events and the ID of the agent that 
  // received the call.
  AgentInfo agent_info = 2;
  // Optional. Allows overriding a session. When set to true, if a session with the specified agent_extension 
  // exists, it is terminated. Also known as session theft.
  bool session_override = 3;
  // Optional. Additional agent login information. 
  map<string, string> additional_login_information = 4;
  
}

// Output message that defines parameters returned by [StartAgentSession](#StartAgentSession).
message StartAgentSessionResponse {
  // One of the following events.
  oneof agent_event {
    // General operation status.
    nuance.rpc.Status status = 1;
    // An agent session is generated and monitored for new call sessions.
    AgentSessionCreatedEvent agent_session_created_event = 2;
    // A new call session is available for this agent.
    AgentNewCallSessionEvent agent_new_call_session_event = 3;
    // An agent logout request is processed.
    AgentLogoutEvent agent_logout_event = 4;
    // An active agent session already exists for the specified extension.
    ExistingAgentSessionEvent existing_agent_session_event = 5;
    // The agent session has expired.
    AgentSessionExpiredEvent agent_session_expired_event = 6;
    // The server undergos maintenance at the specified time.
    ServerMaintenanceEvent server_maintenance_event = 7;
    // The agent session subscription information.
    AgentSessionSubscriptionInformation agent_session_subscription_information = 8;
  }
}

// Input message that defines parameters for [StopAgentSession](#StopAgentSession).
message StopAgentSessionRequest {
  // Mandatory. General request context.
  Context context = 1;
  // Mandatory. Global agent session ID generated by the Agent Session Manager.
  string agent_session_id = 2;
}

// Output message that defines parameters returned by [StopAgentSession](#StopAgentSession).
message StopAgentSessionResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Contains create agent event details. Included in [StartAgentSessionResponse](#nuance.biosec.v1.managers.asm.StartAgentSessionResponse).
message AgentSessionCreatedEvent {
  // Generated agent session ID.
  AgentEvent agent_event = 1; 
}

// Contains new call session event details. Included in [StartAgentSessionResponse](#nuance.biosec.v1.managers.asm.StartAgentSessionResponse).
message AgentNewCallSessionEvent {
  // Generated agent session ID.
  AgentEvent agent_event = 1; 
  // Provides information about the available call and allows subscriptions based on call details.
  string call_session_id = 2;
  // Contains information about the CTI event.
  CtiEvent cti_event = 3;
}

// Contains agent logout event details. Included in [StartAgentSessionResponse](#nuance.biosec.v1.managers.asm.StartAgentSessionResponse).
message AgentLogoutEvent {
  // Generated agent session ID.
  AgentEvent agent_event = 1; 
}

// Contains existing agent session event details. Included in [StartAgentSessionResponse](#nuance.biosec.v1.managers.asm.StartAgentSessionResponse). 
// The event is used to indicate if another session already exists for the specified extension when attempting to 
// start an agent session.
message ExistingAgentSessionEvent {
  // Generated agent session ID.
  AgentEvent agent_event = 1; 
  // Date and time when the existing session is established.
  google.protobuf.Timestamp existing_session_established_timestamp = 2;
}

// Contains session expired event details. Included in [StartAgentSessionResponse](#nuance.biosec.v1.managers.asm.StartAgentSessionResponse). 
message AgentSessionExpiredEvent {
  // Generated agent session ID.
  AgentEvent agent_event = 1;
  // Indicates if the session is overridden.  
  bool session_overridden = 2;
}

// Contains server maintenance event details. Included in [StartAgentSessionResponse](#nuance.biosec.v1.managers.asm.StartAgentSessionResponse). 
message ServerMaintenanceEvent {
  // Generated agent session ID.
  AgentEvent agent_event = 1;
  // Time until the maintenance event starts.  
  google.protobuf.Duration time_until_maintenance = 2;
}

// Contains agent session subscription information. Included in [StartAgentSessionResponse](#nuance.biosec.v1.managers.asm.StartAgentSessionResponse).
message AgentSessionSubscriptionInformation {
  // Generated agent session ID.
  AgentEvent agent_event = 1;
  // Media Manager realm ID used for this agent session.
  string realm_id = 2;
  // Media Manager subscription ID used for this agent session.
  string subscription_id = 3;
  // Additional agent session subscription information.
  map<string, string> additional_subscription_information = 4;
}

// Contains the session agent ID.
message AgentEvent {
  // Generated agent session ID.
  string agent_session_id = 1; 
}
