/*-
 * #%L
 * call-session-manager-public-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.managers.csm;

option java_multiple_files = true;
option java_package = "com.nuance.rpc.biosec.v1.managers.csm";

import "nuance/biosec/v1/common_types.proto";
import "nuance/biosec/v1/managers/csm/call_session_manager_messages.proto";
import "nuance/rpc/status.proto";
import "google/api/annotations.proto";

// The nuance.biosec.v1.managers.csm package contains the Gatekeeper CSM API. It includes three files:
// call_session_manager_enums.proto, call_session_manager_messages.proto. and call_session_manager_service.proto.

// Call Session Manager service API.
service CallSessionManager {

  // This server streaming method allows the client to subscribe and receive call session events raised by
  // the server.
  // Events can be related to CTI, biometric operations, or can be results of agent triggered actions.
  rpc MonitorCallSession(MonitorCallSessionRequest) returns (stream MonitorCallSessionResponse) {
    option (google.api.http) = {
      get: "/v1/call-sessions/{call_session_id}:monitorCallSession"
    };
  };


  // Retrieves agent ongoing calls' information. The returned call session ID might be used as
  // input to the [SubmitAgentAction](#SubmitAgentAction) method.
  rpc ListCallSessions(ListCallSessionsRequest) returns (ListCallSessionsResponse) {
    option (google.api.http) = {
      get: "/v1/call-sessions"
    };
  }

  // A unary method that allows Web Agent Console client to execute various manually triggered actions
  // on the ongoing call session. The outcome of these actions, if any, propagates from the server
  // via events on the [MonitorCallSession](#MonitorCallSession) method.
  // Agent actions include updating person information, consent, manually authenticating the Person, restarting audio,
  // and marking audio as suspicious. It is mandatory for clients to pass the call session ID to this method.
  rpc SubmitAgentAction(SubmitAgentActionRequest) returns (SubmitAgentActionResponse) {
    option (google.api.http) = {
      post: "/v1/call-sessions/{call_session_id}:submitAgentAction"
      body: "*"
    };
  }

}

// Input message that defines parameters for [MonitorCallSession](#MonitorCallSession).
message MonitorCallSessionRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Global call session ID generated by the call session manager.
  string call_session_id = 2;
}

// Output message that defines parameters returned by [MonitorCallSession](#MonitorCallSession).
// Each returned event is set to one of the event options.
message MonitorCallSessionResponse {
  // Types of events.
  oneof call_session_event {
    // General operation status.
    nuance.rpc.Status status = 1;
    // CTI related events.
    nuance.biosec.v1.CtiEvent cti_event = 2;
    // Audio processing events.
    ProcessAudioEvent process_audio_event = 3;
    // Voiceprint enrollment events.
    EnrollEvent enroll_event = 4;
    // Voiceprint training events.
    TrainEvent train_event = 5;
    // Voiceprint verification events.
    VerifyEvent verify_event = 6;
    // Fraudsters detection events.
    KnownFraudstersDetectionEvent known_fraudsters_detection_event = 7;
    // Provides person and voiceprint status details.
    PersonStatusEvent person_event = 8;
    // The restart event. Typically used to restart a recording when a new person joins the call.
    RestartEvent restart_event = 9;
    // Audio spoofing detection events.
    DetectAudioSpoofingEvent detect_audio_spoofing_event = 10;
    // Risk-engine based session decision events.
    SessionDecisionEvent session_decision_event = 11;
    // Voiceprint identification events.
    IdentifyEvent identify_event = 12;
    // Provides information about the group members.
    GroupMembersEvent group_members_event = 13;
    // A group member was manually identified as the current speaker by a source other than the agent.
    PersonManuallyIdentified person_manually_identified = 14;
    // Results of the previous session in the current engagement.
    PreviousSessionResult previous_session_result = 15;
    // A message that should be shown to the agent.
    DisplayMessage display_message = 16;
    // Indicate to the WAC that certain actions should be disabled (or enabled back again).
    // This event overrides any previous block actions list (including the list in display message event).
    UpdateAgentBlockedActionsEvent update_agent_blocked_actions_event = 17;
    // Text processing events.
    ProcessTextEvent process_text_event = 18;
    // Convoprint enrollment events.
    EnrollConvoprintEvent enroll_convoprint_event = 19;
    // Convoprint training events.
    TrainConvoprintEvent train_convoprint_event = 20;
    // Convoprint verification events.
    VerifyConvoprintEvent verify_convoprint_event = 21;
    // Convoprint fraudsters detection events.
    KnownFraudstersDetectionConvoprintEvent known_fraudsters_detection_convoprint_event = 22;
    // Convoprint identification events.
    IdentifyConvoprintEvent identify_convoprint_event = 23;
    // Deviceprint audio processing events.
    ProcessAudioDeviceprintEvent process_audio_deviceprint_event = 24;
    // Deviceprint enrollment events.
    EnrollDeviceprintEvent enroll_deviceprint_event = 25;
    // Deviceprint training events.
    TrainDeviceprintEvent train_deviceprint_event = 26;
    // Deviceprint verification events.
    VerifyDeviceprintEvent verify_deviceprint_event = 27;
    // Deviceprint fraudsters detection events.
    KnownFraudstersDetectionDeviceprintEvent known_fraudsters_detection_deviceprint_event = 28;
  }
}

// Input message that defines parameters for [SubmitAgentAction](#SubmitAgentAction).
message SubmitAgentActionRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;

  // Mandatory. Global call session ID identifies the call session that the action applies to.
  string call_session_id = 2;

  // The action triggered by the agent.
  oneof agent_action {
    // Agent submits the person's information.
    UpdatePersonInformation update_person_information = 3;
    // Agent manually authenticates the speaker.
    Authenticity authenticity = 4;
    // Agent requests to restart the call session, typically when a new person joins during a call. This action does
    // not impact the Web Agent Console, but is reflected in the Gatekeeper web portal (engagement view).
    Restart restart = 5;
    // Agent requests to opt-in the person.
    OptIn opt_in = 6;
    // Agent requests to opt-out the person.
    OptOut opt_out = 7;
    // Agent flags the call session as suspicious.
    Suspicious suspicious = 8;
    // Send a custom message to the custom logic webhook.
    CustomLogicWebhookMessage custom_message = 9;
    // Agent submits the group information.
    GroupInformation group_information = 10;
    // Agent identifies the group member as the current speaker.
    PersonManuallyIdentified person_manually_identified = 11;
  }
}

// Output message that defines parameters returned by [SubmitAgentAction](#SubmitAgentAction).
message SubmitAgentActionResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [ListCallSessions](#ListCallSessions).
message ListCallSessionsRequest {

  // Mandatory. General request context. Only the Gatekeeper scope ID is a mandatory field in the context message.
  nuance.biosec.v1.Context context = 1;

  // Mandatory. Target call sessions are identified by either agent ID or agent extension. 
  // Regular clients having permissions for accessing this method are allowed only to request 
  // the call sessions they own. Additional permissons need to be configured for the calling principal 
  // to allow requesting any call sessions under the specified context (privileged operation).
  oneof agent_selector {
    // Mandatory. The agent user name as it is used for the single sign-on.
     string agent_id = 2;
    // Mandatory. The agent extension used by the agent during the login to the Web Agent Console.
     string agent_extension = 3;
   }
}

// Output message that defines parameters returned by [ListCallSessions](#ListCallSessions).
message ListCallSessionsResponse {

  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;
  // Mandatory. The agent information.
  AgentSessionInfo agent_session_info = 2;
  // Repeated. On going calls associated to the agent.
  repeated CallSessionInfo call_session_info = 3;
}

// Agent information message
message AgentSessionInfo {
  // Mandatory. The Media Manager subscription ID related to the agent session.
  string agent_subscription_id = 1;
  // Mandatory. The agent session ID, which serves as input to the stop agent session.
  string agent_session_id = 2;
  // Mandatory. The Media manager realm ID.
  string realm_id = 3;
}

// Call session information message
message CallSessionInfo {

  // Mandatory. The call session ID that can be used as input for [SubmitAgentAction](#SubmitAgentAction)
  string call_session_id = 1;

  // Mandatory. The start call CTI event.
  nuance.biosec.v1.CtiEvent start_call_cti_event = 2;
}

