/*-
 * #%L
 * call-session-manager-public-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.managers.csm;

option java_multiple_files = true;
option java_package = "com.nuance.rpc.biosec.v1.managers.csm";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "nuance/biosec/v1/common_types.proto";
import "nuance/biosec/v1/managers/csm/call_session_manager_enums.proto";

// The nuance.biosec.v1.managers.csm package contains the Gatekeeper CSM API. It includes three files:
// call_session_manager_enums.proto, call_session_manager_messages.proto. and call_session_manager_service.proto.

// The agent uses this message to submit the information of the person on the call.
message UpdatePersonInformation {
  // Mandatory. Person information details.
  PersonInformation person_information = 1;
}

// Person information details.
message PersonInformation {
  // Mandatory. Person's external identifier, used as a reference in biometrics operations.
  string person_id = 1;

  // Optional. Person's first name.
  string first_name = 2;

  // Optional. Person's last name.
  string last_name = 3;

  // Optional. List of custom application data in key-value pairs.
  map<string, string> custom_data = 4;
}

// Additional person information that can be displayed to the agent.
message PersonDisplay {
  // Optional. The text that displays the person's name to the agent.
  string display_name = 4;

  // Optional. Additional information to display related to the person.
  string additional_information = 5;
}

// Audio processing event.
message ProcessAudioEvent {
  oneof process_audio_event {
    // Audio processing has started.
    bool started_event = 1;

    // Contains more information about the audio processing progress.
    ProcessAudioProgressEvent progress_event = 2;

    // Audio processing has completed.
    ProcessAudioCompletedEvent completed_event = 3;
  }
}

// Audio processing progress events.
message ProcessAudioProgressEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;

  // Mandatory. Minimum net audio required for training. The value for this field is expected to be higher or equal to min_net_audio_required_for_enroll field.
  google.protobuf.Duration min_net_audio_required = 3;

  // Optional. Minimum net audio required for enrollment. The value for this field is expected to be lower or equal to min_net_audio_required field.
  google.protobuf.Duration min_net_audio_required_for_enroll = 5;

  // Mandatory. Maximum net audio required for enrollment.
  google.protobuf.Duration max_net_audio_allowed = 4;
}

// Audio processing results.
message ProcessAudioCompletedEvent {
  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 1;
}

// Voiceprint enrollment events.
message EnrollEvent {
  oneof enroll_event {
    // Voiceprint enrollment has started.
    bool started_event = 1;

    // Voiceprint enrollment has completed.
    EnrollCompletedEvent completed_event = 2;
  }
}

// Voiceprint enrollment results.
message EnrollCompletedEvent {
  // Mandatory. Status of the enroll operation.
  EnrollStatus enroll_status = 1;
}

// Voiceprint training events.
message TrainEvent {
  oneof train_event {
    // Voiceprint training has started.
    bool started_event = 1;

    // Voiceprint training has completed.
    TrainCompletedEvent completed_event = 2;
  }
}

// Voiceprint training results.
message TrainCompletedEvent {
  // Mandatory. Status of the training operation.
  TrainStatus train_status = 1;

  // Mandatory. Reason of the status of the training operation.
  TrainReason train_reason = 2;
}

// Voiceprint verification events.
message VerifyEvent {
  oneof verify_processing_event {
    // Voiceprint verification has started.
    bool started_event = 1;

    // Contains more information about the voiceprint verification progress.
    VerifyProgressEvent progress_event = 2;

    // Voiceprint verification results.
    VerifyCompletedEvent completed_event = 3;
  }
}

// Voiceprint verification progress events.
message VerifyProgressEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;

  // Mandatory. The verification checkpoint that is reached.
  int32 current_checkpoint_number = 3;

  // Mandatory. Last verification checkpoint.
  int32 final_checkpoint_number = 4;
}

// Voiceprint verification results.
message VerifyCompletedEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;

  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 3;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 4;
}

// The agent uses this message to submit the group identifier.
message GroupInformation {
  // Mandatory. The external group identifier.
  string group_id = 1;
}

// The agent uses this message to identify the person in the group that is the current speaker, using a manual process other than voiceprint identification.
// This can also be sent in MonitorCallSessionResponse if the person is identified by a source other than the agent.
message PersonManuallyIdentified {
  // Mandatory. The selected external person identifier.
  string person_id = 1;
}

// Voiceprint identification events.
message IdentifyEvent {
  oneof identification_processing_event {
    // Identification has started.
    bool started_event = 1;

    // Contains more information about the voiceprint identification progress.
    IdentifyProgressEvent progress_event = 2;

    // Voiceprint identification results.
    IdentifyCompletedEvent completed_event = 3;
  }
}

// Provides information about the group members.
message GroupMembersEvent {
  // Mandatory. The retrieval status code.
  GroupMembersStatus status = 1;

  // Mandatory. The external Group identifier.
  string group_id = 2;

  // Optional. The group members, in the form of external person identifiers.
  // Depending on the value of status, the list may be empty or incomplete.
  repeated string person_ids = 3;
}

// Voiceprint identification progress events.
message IdentifyProgressEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;

  // Mandatory. The identification checkpoint that has reached.
  int32 current_checkpoint_number = 3;

  // Mandatory. Last identification checkpoint.
  int32 final_checkpoint_number = 4;
}

// Voiceprint identification results.
message IdentifyCompletedEvent {
  // Mandatory. The identified external person identifier, if identification is successful.
  string person_id = 1;

  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 2;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 3;

  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 4;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 5;
}

// Audio spoofing detection events.
message DetectAudioSpoofingEvent {
  oneof detect_audio_spoofing_event {
    // Audio spoofing detection has started.
    bool started_event = 1;

    // Contains more information about the audio spoofing detection progress.
    DetectAudioSpoofingProgressEvent progress_event = 2;

    // Audio spoofing detection results.
    DetectAudioSpoofingCompletedEvent completed_event = 3;
  }
}

// Audio spoofing detection progress events.
message DetectAudioSpoofingProgressEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;
}

// Audio spoofing detection results.
message DetectAudioSpoofingCompletedEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;

  // Mandatory. Playback detection results.
  DecisionInfo playback_decision = 3;

  // Mandatory. Synthetic speech detection results.
  DecisionInfo synthetic_decision = 4;
}

// Factor decision information.
message DecisionInfo {
  // Mandatory. Biometric factor decision.
  nuance.biosec.v1.Decision decision = 1;

  // Mandatory. Biometric factor decision reason.
  DecisionReason decision_reason = 2;
}

// The requested Restart is performed.
message RestartEvent {
  // Optional. If true, indicates that the restart is done to perform re-authentication
  // for the same person ID.
  bool re_authentication = 1;
}

// Fraudster detection related events.
message KnownFraudstersDetectionEvent {
  oneof verify_processing_event {
    // Fraudster detection has started.
    bool started_event = 1;

    // Contains more information about the fraudster detection progress.
    KnownFraudstersDetectionProgressEvent progress_event = 2;

    // Fraudster detection results.
    KnownFraudstersDetectionCompletedEvent completed_event = 3;
  }
}

// Fraudster detection progress events.
message KnownFraudstersDetectionProgressEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;

  // Mandatory. The fraud detection checkpoint that has reached.
  int32 current_checkpoint_number = 3;

  // Mandatory. The last fraud detection checkpoint.
  int32 final_checkpoint_number = 4;

  // Optional. Maximum net audio required for fraud detection.
  google.protobuf.Duration max_net_audio_required = 5;
}

// Fraudster detection results.
message KnownFraudstersDetectionCompletedEvent {
  // Mandatory. Current net audio.
  google.protobuf.Duration current_net_audio = 1;

  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 2;

  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 3;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 4;
}

// Provides Person and Voiceprint status details.
message PersonStatusEvent {
  // Mandatory. Person information details.
  PersonInformation person_information = 1;

  // Optional. If the person did not opt-in nor opt-out, none of the options are set.
  oneof opt_in_out {
    // Person opted-in.
    OptInInfo opt_in_info = 2;

    // Person opted-out.
    OptOutInfo opt_out_info = 3;
  }

  // Mandatory. Person's enrollment status.
  EnrollStatus enroll_status = 4;

  // Optional. Person's voiceprint lock information.
  VoicePrintLockInfo voice_print_lock_info = 5;

  // Optional. Additional display information.
  PersonDisplay person_display = 6;
}

// Person's voiceprint lock information.
message VoicePrintLockInfo {
  // Mandatory. Person's voiceprint lock status.
  bool locked = 1;

  // Optional. User that locked this person's voiceprint.
  string locked_by = 2;

  // Optional. Voiceprint lock reason text.
  string reason = 3;

  // Optional. Mismatch counter that triggers locking the voiceprint.
  google.protobuf.Int32Value mismatch_counter = 4;

  // Optional. Voiceprint lock timestamp.
  google.protobuf.Timestamp timestamp = 5;

  // Optional. Specifies the standard locking reason.
  nuance.biosec.v1.LockReason lock_reason = 6;
}

// Opt-in information.
message OptInInfo {
  // Mandatory. When the person opted-in.
  google.protobuf.Timestamp timestamp = 1;
}

// Opt-out information.
message OptOutInfo {
  // Mandatory. When the person opted-out.
  google.protobuf.Timestamp timestamp = 1;

  // Optional. The provided opt-out reason.
  string reason = 2;

  // Mandatory. When opt-in can be enabled.
  google.protobuf.Timestamp offer_opt_in_time = 5;

  // Mandatory. True when opt-out duration has passed.
  bool offer_opt_in = 4;
}

// Agent manually authenticates the speaker.
message Authenticity {
}

// Agent requests to opt-in the person on the call.
message OptIn  {
}

// Agent requests to opt-out the person on the call.
message OptOut {
  // Mandatory. Opt-out reason for the person as selected by the agent.
  string reason = 2;

  // Mandatory. Amount of days to wait until opt-in can be offered to the customer again, as selected by the agent (the amount of days to wait from opting out).
  google.protobuf.Int32Value opt_out_in_days = 4;
}

// Agent requests to restart the call session, typically used when a new person joins the call.
message Restart {
}

// Agent flags the call session as suspicious.
message Suspicious {
  // Mandatory. Suspicious flag status.
  bool is_suspicious = 1;

  // Optional. Suspicious reason for the call as selected by the agent.
  string reason = 2;
}

// Risk-engine based session decision event.
message SessionDecisionEvent {
  // Mandatory. Risk-engine based decision.
  nuance.biosec.v1.Decision decision = 1;

  // Mandatory. Biometric decision reason.
  DecisionReason decisionReason = 2;
}

// Sends a custom message to the custom logic webhook.
message CustomLogicWebhookMessage {
  // Mandatory. An arbitrary string to attach to the custom message.
  // The payload is then available to the webhook
  // in the `result.customEventMessage` session variable.
  // The payload should not be bigger than one kilobyte.
  string payload = 1;
}

// Results of the previous session in the current engagement.
message PreviousSessionResult {
  // Mandatory. The identifier of the person that is authenticated or enrolled.
  string person_id = 1;
  // Mandatory. The person is manually identified (not as a result of voiceprint identification).
  bool manually_identified = 2;
  // Optional. The risk-engine decision.
  SessionDecisionEvent previous_session_decision = 3;
  // Optional. The enrollment result.
  EnrollCompletedEvent enroll_completed_event = 4;
}

// Displays a message to the agent.
message DisplayMessage {
  // Optional. The message's type, for example info, warning, and so on.
  DisplayMessageType type = 1;
  // Optional. The title's localization label.
  string title_label = 2;
  // Mandatory. The title's non-localized text.
  string title_text = 3;
  // Optional. The message's localization label.
  string message_label = 4;
  // Mandatory. The message's non-localized text.
  string message_text = 5;
  // Optional. Disable agent actions in the Web Agent Console (WAC) until the call ends, except
  // for `SubmitAgentActionRequest.Restart`.
  bool disable_actions = 6;
  // Optional. Disable the following specific actions in the WAC.
  // The list overrides any previous blocked actions list.
  repeated AgentActionToBlock agent_action_to_block = 7;
}

// Indicates to the WAC that certain actions should be disabled.
message UpdateAgentBlockedActionsEvent {
  // Optional. Disable the following specific actions in the WAC.
  repeated AgentActionToBlock agent_action_to_block = 1;
  // Optional. Enable the following specific actions in the WAC.
  // If a value of AgentActionToBlock is listed in both agent_action_to_block and
  // agent_action_to_enable, the action for that value is enabled.
  repeated AgentActionToBlock agent_action_to_allow = 2;
}

// Text processing event.
message ProcessTextEvent {
  oneof event {
    // Text processing has started.
    bool started_event = 1;

    // Text processing has completed.
    ProcessTextCompletedEvent completed_event = 2;
  }
}

// Text processing results.
message ProcessTextCompletedEvent {

}

// Convoprint enrollment events.
message EnrollConvoprintEvent {
  oneof event {
    // Convoprint enrollment has started.
    bool started_event = 1;

    // Convoprint enrollment has completed.
    EnrollConvoprintCompletedEvent completed_event = 2;
  }
}

// Convoprint enrollment results.
message EnrollConvoprintCompletedEvent {
  // Mandatory. Status of the enroll operation.
  EnrollStatus enroll_status = 1;
}

// Convoprint training results.
message TrainConvoprintEvent {
  oneof event {
    // Convoprint training has started.
    bool started_event = 1;

    // Convoprint training has completed.
    TrainConvoprintCompletedEvent completed_event = 2;
  }
}

// Convoprint training results.
message TrainConvoprintCompletedEvent {
  // Mandatory. Status of the training operation.
  TrainStatus train_status = 1;

  // Mandatory. Reason of the status of the training operation.
  TrainReason train_reason = 2;
}

// Convoprint verification events.
message VerifyConvoprintEvent {
  oneof event {
    // Convoprint verification has started.
    bool started_event = 1;

    // Convoprint verification results.
    VerifyConvoprintCompletedEvent completed_event = 2;
  }
}

// Convoprint verification results.
message VerifyConvoprintCompletedEvent {
  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 1;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 2;
}

// Convoprint fraudster detection related events.
message KnownFraudstersDetectionConvoprintEvent {
  oneof event {
    // Fraudster detection has started.
    bool started_event = 1;

    // Fraudster detection results.
    KnownFraudstersDetectionConvoprintCompletedEvent completed_event = 2;
  }
}

// Convoprint fraudster detection results.
message KnownFraudstersDetectionConvoprintCompletedEvent {
  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 1;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 2;
}

// Convoprint identification events.
message IdentifyConvoprintEvent {
  oneof event {
    // Identification has started.
    bool started_event = 1;

    // Convoprint identification results.
    IdentifyConvoprintCompletedEvent completed_event = 2;
  }
}

// Convoprint identification results.
message IdentifyConvoprintCompletedEvent {
  // Mandatory. The identified external person identifier, if identification is successful.
  string person_id = 1;

  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 2;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 3;
}

// Deviceprint audio processing results.
message ProcessAudioDeviceprintEvent {
  oneof event {
    // Mandatory. Deviceprint audio processing has started.
    bool started_event = 1;

    // Mandatory. Deviceprint audio processing has completed.
    ProcessAudioDeviceprintCompletedEvent completed_event = 2;
  }
}

// Deviceprint audio processing completion results.
message ProcessAudioDeviceprintCompletedEvent {
  // Mandatory. Validity of the audio used for the operation.
  AudioValidity audio_validity = 1;
}

// Deviceprint enrollment results.
message EnrollDeviceprintEvent {
  oneof event {
    // Mandatory. Deviceprint enrollment has started.
    bool started_event = 1;

    // Mandatory. Deviceprint enrollment has completed.
    EnrollDeviceprintCompletedEvent completed_event = 2;
  }
}

// Deviceprint enrollment completion results.
message EnrollDeviceprintCompletedEvent {
  // Mandatory. Status of the enroll operation.
  EnrollStatus enroll_status = 1;
}

// Deviceprint training results.
message TrainDeviceprintEvent {
  oneof event {
    // Mandatory. Deviceprint training has started.
    bool started_event = 1;

    // Mandatory. Deviceprint training has completed.
    TrainDeviceprintCompletedEvent completed_event = 2;
  }
}

// Deviceprint training completion results.
message TrainDeviceprintCompletedEvent {
  // Mandatory. Status of the training operation.
  TrainStatus train_status = 1;

  // Mandatory. Reason of the status of the training operation.
  TrainReason train_reason = 2;
}

// Deviceprint verification results.
message VerifyDeviceprintEvent {
  oneof event {
    // Mandatory. Deviceprint verification has started.
    bool started_event = 1;

    // Mandatory. Deviceprint verification has completed.
    VerifyDeviceprintCompletedEvent completed_event = 2;
  }
}

// Deviceprint verification completion results.
message VerifyDeviceprintCompletedEvent {
  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 1;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 2;
}

// Deviceprint fraudsters detection results.
message KnownFraudstersDetectionDeviceprintEvent {
  oneof event {
    // Text processing has started.
    bool started_event = 1;

    // Text processing has completed.
    KnownFraudstersDetectionDeviceprintCompletedEvent completed_event = 2;
  }
}

message KnownFraudstersDetectionDeviceprintCompletedEvent {
  // Mandatory. The biometric factor decision.
  nuance.biosec.v1.Decision decision = 1;

  // Mandatory. The biometric factor decision reason.
  DecisionReason decision_reason = 2;
}