/*-
 * #%L
 * call-session-manager-public-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.managers.csm;

option java_multiple_files = true;
option java_package = "com.nuance.rpc.biosec.v1.managers.csm";

// The nuance.biosec.v1.managers.csm package contains the Gatekeeper CSM API. It includes three files:
// call_session_manager_enums.proto, call_session_manager_messages.proto. and call_session_manager_service.proto.

// Decision reason for voiceprint, convoprint, and audio spoofing biometric factors.
enum DecisionReason {
  // Decision reason is not specified (all factors).
  DECISION_REASON_UNSPECIFIED = 0;
  // An error occurred while making the decision (all factors).
  DECISION_REASON_INTERNAL_ERROR = 1;
  // Audio is valid (voiceprint, deviceprint and audio spoofing factors).
  DECISION_REASON_AUDIO_OK = 2;
  // Processing requires more audio segments than provided (voiceprint, deviceprint and audio spoofing factors).
  DECISION_REASON_NOT_ENOUGH_AUDIO = 3;
  // Audio format is invalid or not supported (voiceprint and audio spoofing factors).
  DECISION_REASON_INVALID_AUDIO = 4;
  // Audio does not contain the amount of speech required to complete the process (voiceprint, deviceprint and audio spoofing factors).
  DECISION_REASON_AUDIO_TOO_SHORT = 5;
  // Audio speech level is lower than the level required to complete the process (voiceprint, deviceprint and audio spoofing factors).
  DECISION_REASON_AUDIO_TOO_SOFT = 6;
  // Audio is too loud and causes saturation (voiceprint, deviceprint and audio spoofing factors).
  DECISION_REASON_AUDIO_TOO_LOUD = 7;
  // Audio SNR (Signal to Noise Ratio) is too low (voiceprint, deviceprint and audio spoofing factors).
  DECISION_REASON_AUDIO_TOO_NOISY = 8;
  // Multiple speakers are detected (not supported).
  DECISION_REASON_MULTI_SPEAKERS_DETECTED = 9;
  // Synthetic speech is detected (audio spoofing factor).
  DECISION_REASON_SYNTHETIC_SPEECH_DETECTED = 10;
  // Playback is detected (audio spoofing factor).
  DECISION_REASON_PLAYBACK_INDICATION = 11;
  // Tone is detected (not supported).
  DECISION_REASON_TONE_DETECTED = 12;
  // Wrong passphrase is used (not supported).
  DECISION_REASON_WRONG_PASSPHRASE = 13;
  // A fraud attempt probably occurred (voiceprint, deviceprint and convoprint factors).
  DECISION_REASON_FRAUDSTER_INDICATION = 14;
  // This is probably an authentic person (voiceprint factor).
  DECISION_REASON_VOICEPRINT_MATCH = 15;
  // This is probably not an authentic person (voiceprint factor).
  DECISION_REASON_VOICEPRINT_MISMATCH = 16;
  // Could not determine if this is the authentic person (voiceprint factor).
  DECISION_REASON_VOICEPRINT_UNCERTAIN = 17;
  // The system could not reach a reliable decision (audio, deviceprint spoofing factos).
  DECISION_REASON_UNRELIABLE_DECISION_THRESHOLDS = 18;
  // Text is valid (convoprint factor).
  DECISION_REASON_TEXT_OK = 19;
  // Text format is invalid or not supported (convoprint factor).
  DECISION_REASON_INVALID_TEXT = 20;
  // This is probably the authentic person (convoprint factor).
  DECISION_REASON_CONVOPRINT_MATCH = 21;
  // This is probably not the authentic person (convoprint factor).
  DECISION_REASON_CONVOPRINT_NO_MATCH = 22;
  // Could not determine if this is the authentic person (convoprint factor).
  DECISION_REASON_CONVOPRINT_UNCERTAIN = 23;
  // Risk is not detected (convoprint, deviceprint factors).
  DECISION_REASON_NO_RISK_DETECTED = 24;
  // No available scores (convoprint, deviceprint factors).
  DECISION_REASON_NO_SCORES = 25;
  // This is probably the authentic person (deviceprint factor).
  DECISION_REASON_DEVICEPRINT_MATCH = 26;
  // This is probably not the authentic person (deviceprint factor).
  DECISION_REASON_DEVICEPRINT_NO_MATCH = 27;
}

// Specifies the current enrollment status of a person's voiceprint.
enum EnrollStatus {
  // Enroll status is not set.
  ENROLL_STATUS_UNSPECIFIED = 0;
  // Ready for enrollment.
  ENROLL_STATUS_READY = 1;
  // Ready for verification.
  ENROLL_STATUS_TRAINED = 2;
  // Missing additional audio segments.
  ENROLL_STATUS_PARTIALLY_ENROLLED = 3;
  // Not enrolled.
  ENROLL_STATUS_NOT_ENROLLED = 4;
}

// Specifies the result status code of retrieving group member information.
enum GroupMembersStatus {
  // Group member status unspecified.
  GROUP_MEMBERS_STATUS_UNSPECIFIED = 0;
  // Group members are successfully retrieved.
  GROUP_MEMBERS_STATUS_OK = 1;
  // There is an internal error retrieving the group members.
  GROUP_MEMBERS_STATUS_INTERNAL_ERROR = 2;
  // The external group identifier is not found.
  GROUP_MEMBERS_STATUS_NOT_FOUND = 3;
  // There are too many group members. The member list may be incomplete.
  GROUP_MEMBERS_STATUS_TOO_BIG = 4;
}

// Specified the type of message to display to the agent.
enum DisplayMessageType {
  // Message type not set.
  DISPLAY_MESSAGE_TYPE_UNSPECIFIED = 0;
  // An informational message.
  DISPLAY_MESSAGE_TYPE_INFO = 1;
  // A warning.
  DISPLAY_MESSAGE_TYPE_WARNING = 2;
  // An error.
  DISPLAY_MESSAGE_TYPE_ERROR = 3;
}

// Specifies agent actions that should be blocked.
enum AgentActionToBlock {
  // Action not set
  AGENT_ACTION_TO_BLOCK_NONE = 0;
  // Block the restart audio action
  AGENT_ACTION_TO_BLOCK_RESTART = 1;
  // Block the suspicius action
  AGENT_ACTION_TO_BLOCK_SUSPICIUS = 2;
  // Block the update person action
  AGENT_ACTION_TO_BLOCK_UPDATE_PERSON_INFORMATION = 3;
  // Block the opt-in action
  AGENT_ACTION_TO_BLOCK_OPT_IN = 4;
  // Block the opt-out action
  AGENT_ACTION_TO_BLOCK_OPT_OUT = 5;
  // Block the authenticity action
  AGENT_ACTION_TO_BLOCK_AUTHENTICITY = 6;
  // Block the custom message action
  AGENT_ACTION_TO_BLOCK_CUSTOM_MESSAGE = 7;
  // Block the group information action
  AGENT_ACTION_TO_BLOCK_GROUP_INFORMATION = 8;
  // Block the person manually identified action
  AGENT_ACTION_TO_BLOCK_PERSON_MANUALLY_IDENTIFIED = 9;
}
