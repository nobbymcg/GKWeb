/*-
 * #%L
 * gatekeeper-api-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.scopes;

option java_package = "com.nuance.rpc.biosec.v1.scopes";
option java_multiple_files = true;

import "nuance/biosec/v1/scopes/scopes_manager_messages.proto";
import "google/api/annotations.proto";

/////////////////////////////
// Scopes Manager Service  //
/////////////////////////////

// This service allows managing scopes.
// Scopes are logical views of the system that partition access to data.
// Use scopes to control the privacy or security of data in the system.
// The scope is identified by an ID determined by the scope creator and by a unique ID generated by the system.
service ScopesManager {

  // Creates a new scope in the system.
  rpc CreateScope (CreateScopeRequest) returns (CreateScopeResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/scopes"
      body: "*"
      additional_bindings {
        post: "/v1/scopes"
        body: "*"
      }
    };
  }

  // Renames a scope's ID.
  rpc RenameScope (RenameScopeRequest) returns (RenameScopeResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/rename"
      body: "*"
      additional_bindings {
        patch: "/v1/scopes/{gk_scope_id.value}/scope_id"
        body: "*"
      }
    };
  }

  // Retrieves a scope's unique ID.
  rpc GetGkScopeId (GetGkScopeIdRequest) returns (GetGkScopeIdResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/scopes/{scope_id}/gkid"
      additional_bindings {
        get: "/v1/scopes/{scope_id}/gkid"
      }
    };
  }

  // Retrieves a scope's details.
  rpc GetScopeDetails (GetScopeDetailsRequest) returns (GetScopeDetailsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/scopes/{gk_scope_id.value}"
      additional_bindings {
        get: "/v1/scopes/{gk_scope_id.value}"
      }
    };
  }

  // Updates a scope's details.
  rpc UpdateScopeDetails (UpdateScopeDetailsRequest) returns (UpdateScopeDetailsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/scopes/{gk_scope_id.value}"
      body: "*"
      additional_bindings {
        patch: "/v1/scopes/{gk_scope_id.value}"
        body: "*"
      }
    };
  }

  // Sets the scope state to either initialized or active.
  // The other states cannot be set by this method.
  // For marking a scope for deletion, use the [MarkScopeForDeletion](#MarkScopeForDeletion) method.
  rpc SetScopeState (SetScopeStateRequest) returns (SetScopeStateResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      put: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/set-state"
      body: "*"
      additional_bindings {
        put: "/v1/scopes/{gk_scope_id.value}/state"
        body: "*"
      }
    };
  }

  // Marks the scope for deletion.
  // Unless this mark is cleared, the scope and all the content are permanently deleted after 30 days.
  // To clear the mark, use [UnMarkScopeForDeletion](#UnMarkScopeForDeletion).
  rpc MarkScopeForDeletion (MarkScopeForDeletionRequest) returns (MarkScopeForDeletionResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      put: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/mark-for-delete"
      body: "*"
      additional_bindings {
        put: "/v1/scopes/{gk_scope_id.value}/attributes/deleted"
        body: "*"
      }
    };
  }

  // Clears the deletion flag. Removes the request to delete the scope.
  rpc UnMarkScopeForDeletion (UnMarkScopeForDeletionRequest) returns (UnMarkScopeForDeletionResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      put: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/unmark-for-delete"
      body: "*"
      additional_bindings {
        delete: "/v1/scopes/{gk_scope_id.value}/attributes/deleted"
      }
    };
  }

  // Deletes the scope's content. The scope is reset to its initial state post activation.
  rpc ResetScope (ResetScopeRequest) returns (ResetScopeResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      put: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/reset"
      body: "*"
      additional_bindings {
        put: "/v1/scopes/{gk_scope_id.value}/reset"
        body: "*"
      }
    };
  }

  // Lists the scopes in the system.
  rpc ListScopes (ListScopesRequest) returns (ListScopesResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/scopes"
      additional_bindings {
        get: "/v1/scopes"
      }
    };
  }

  // Creates scope's resources.
  rpc SetScopeResource (SetScopeResourceRequest) returns (SetScopeResourceResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/resources"
      body: "*"
      additional_bindings {
        post: "/v1/scopes/{gk_scope_id.value}/resources"
        body: "*"
      }
    };
  }

  // Gets scope's resources.
  rpc GetScopeResource (GetScopeResourceRequest) returns (GetScopeResourceResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/resources/{resource_name}"
      additional_bindings {
        get: "/v1/scopes/{gk_scope_id.value}/resources/{resource_name}"
      }
    };
  }

  // Updates the ASRaaS resource credentials.
  rpc UpdateASRaaSCredentials (UpdateASRaaSCredentialsRequest) returns (UpdateASRaaSCredentialsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/scopes/{gk_scope_id.value}/update-asraas-credentials"
      body: "*"
      additional_bindings {
        post: "/v1/scopes/{gk_scope_id.value}/update-asraas-credentials"
        body: "*"
      }
    };
  }

  // Assigns resources to scope.
  rpc AssignScopeResources (AssignScopeResourcesRequest) returns (AssignScopeResourcesResponse) {
    option (google.api.http) = {
      post: "/v1/scopes/{gk_scope_id.value}:assignResources"
      body: "*"
    };
  }

  // Gets scope-assigned resources.
  rpc GetAssignedScopeResources (GetAssignedScopeResourcesRequest) returns (GetAssignedScopeResourcesResponse) {
    option (google.api.http) = {
      get: "/v1/scopes/{gk_scope_id.value}:getAssignedResources"
    };
  }

  // Deletes scope-assigned resources.
  rpc DeleteAssignedScopeResources (DeleteAssignedScopeResourcesRequest) returns (DeleteAssignedScopeResourcesResponse) {
    option (google.api.http) = {
      delete: "/v1/scopes/{gk_scope_id.value}:deleteAssignedResources"
    };
  }

  // Lists all scope's assigned resources.
  rpc ListAssignedScopeResources (ListAssignedScopeResourcesRequest) returns (ListAssignedScopeResourcesResponse) {
    option (google.api.http) = {
      get: "/v1/scopes/{gk_scope_id.value}:listAssignedResources"
    };
  }

  // List scopes with gk resource ID assigned for them.
  rpc ListScopesWithAssignedResource (ListScopesWithAssignedResourceRequest) returns (ListScopesWithAssignedResourceResponse) {
    option (google.api.http) = {
      get: "/v1/resources/{gk_resource_id.value}:listScopes"
    };
  }
}
