/*-
 * #%L
 * gatekeeper-api-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.entities;

option java_package = "com.nuance.rpc.biosec.v1.entities";
option java_multiple_files = true;

import "nuance/biosec/v1/entities/persons_messages.proto";
import "nuance/biosec/v1/entities/fraudsters_messages.proto";
import "nuance/biosec/v1/entities/groups_messages.proto";
import "nuance/biosec/v1/entities/watchlists_messages.proto";
import "nuance/biosec/v1/entities/caller_id_watchlists_messages.proto";
import "google/api/annotations.proto";

//////////////////////////////
// EntitiesManager Service  //
/////////////////////////////

// This service allows managing system entities. Entities are:
// - Person - Someone whose biometric data is to be analyzed for authenticity.
// - Fraudster - Someone who is known to be an imposter and is tracked in a fraudster watchlist.
// - Group - Set of persons. Groups are commonly used for [Identification](#Identify).
// - Watchlist - Set of fraudsters. Watchlists are commonly used for [Known Fraudsters Detection](#DetectKnownFraudsters).
// Each entity is identified by an ID determined by the calling application and by a unique ID generated by the system.
// Entity IDs must be unique at the scope level, while the IDs that the system generates are globally unique and immutable.
service EntitiesManager {

  /////////////
  // Persons //
  /////////////

  // Creates a new person entity in the specified scope.
  rpc CreatePerson (CreatePersonRequest) returns (CreatePersonResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/persons"
      body: "*"
      additional_bindings {
        post: "/v1/persons"
        body: "*"
      }
    };
  }

  // Renames the person's ID.
  rpc RenamePerson (RenamePersonRequest) returns (RenamePersonResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}/rename"
      body: "*"
      additional_bindings {
        patch: "/v1/persons/{gk_person_id.value}/person_id"
        body: "*"
      }
    };
  }

  // Updates the person's details.
  rpc UpdatePerson (UpdatePersonRequest) returns (UpdatePersonResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}"
      body: "*"
      additional_bindings {
        patch: "/v1/persons/{gk_person_id.value}"
        body: "*"
      }
    };
  }

  // Retrieves the person's details.
  rpc GetPersonDetails (GetPersonDetailsRequest) returns (GetPersonDetailsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}"
      additional_bindings {
        get: "/v1/persons/{gk_person_id.value}"
      }
    };
  }

  // Retrieves the unique ID of the specified person.
  rpc GetGkPersonId (GetGkPersonIdRequest) returns (GetGkPersonIdResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/persons/{person_id}/gkid"
      additional_bindings {
        get: "/v1/persons/{person_id}/gkid"
      }
    };
  }

  // Records that the person provided consent for collecting their biometric data.
  rpc OptPersonIn (OptPersonInRequest) returns (OptPersonInResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      put: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}/optin"
      body: "*"
      additional_bindings {
        put: "/v1/persons/{gk_person_id.value}/optin"
        body: "*"
      }
    };
  }

  // Records that the person did not provide consent for collecting their biometric data.
  // If the person has a print, the method deletes it.
  rpc OptPersonOut (OptPersonOutRequest) returns (OptPersonOutResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      put: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}/optout"
      body: "*"
      additional_bindings {
        put: "/v1/persons/{gk_person_id.value}/optout"
        body: "*"
      }
    };
  }

  // Deletes all personal information associated with the specified person from the system. Deletion is asynchronous and may take some time to complete.
  // Use this method to adhere to Data Subject Rights as defined in various regulations such as GDPR.
  // Unless set explicitly, the system uses the claimed ID as the audio owner. The method does not delete audio detected as fraud or tagged as legal hold.
  rpc DeletePersonalData (DeletePersonalDataRequest) returns (DeletePersonalDataResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      delete: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}/personal-data"
      additional_bindings {
        delete: "/v1/persons/{gk_person_id.value}/personal-data"
      }
    };
  }

  // Completely deletes all data associated with the person. Use in test environments only.
  rpc DeletePerson (DeletePersonRequest) returns (DeletePersonResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      delete: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}"
      additional_bindings {
        delete: "/v1/persons/{gk_person_id.value}"
      }
    };
  }

  // Enumerates all of the person's print profiles.
  rpc ListPersonProfiles (ListPersonProfilesRequest) returns (ListPersonProfilesResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/persons/{gk_person_id.value}/profiles"
      additional_bindings {
        get: "/v1/persons/{gk_person_id.value}/profiles"
      }
    };
  }

  ////////////////
  // Fraudsters //
  ////////////////

  // Creates a new fraudster entity in the specified scope.
  rpc CreateFraudster (CreateFraudsterRequest) returns (CreateFraudsterResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/fraudsters"
      body: "*"
      additional_bindings {
        post: "/v1/fraudsters"
        body: "*"
      }
    };
  }

  // Renames the fraudster's ID.
  rpc RenameFraudster (RenameFraudsterRequest) returns (RenameFraudsterResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/fraudsters/{gk_fraudster_id.value}/rename"
      body: "*"
      additional_bindings {
        patch: "/v1/fraudsters/{gk_fraudster_id.value}/fraudster_id"
        body: "*"
      }
    };
  }

  // Updates the fraudster's details.
  rpc UpdateFraudster (UpdateFraudsterRequest) returns (UpdateFraudsterResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/fraudsters/{gk_fraudster_id.value}"
      body: "*"
      additional_bindings {
        patch: "/v1/fraudsters/{gk_fraudster_id.value}"
        body: "*"
      }
    };
  }

  // Retrieves the fraudster's details.
  rpc GetFraudsterDetails (GetFraudsterDetailsRequest) returns (GetFraudsterDetailsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/fraudsters/{gk_fraudster_id.value}"
      additional_bindings {
        get: "/v1/fraudsters/{gk_fraudster_id.value}"
      }
    };
  }

  // Retrieves the unique ID of the specified fraudster.
  rpc GetGkFraudsterId (GetGkFraudsterIdRequest) returns (GetGkFraudsterIdResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/fraudsters/{fraudster_id}/gkid"
      additional_bindings {
        get: "/v1/fraudsters/{fraudster_id}/gkid"
      }
    };
  }

  // Completely deletes all data associated with the fraudster. Use in test environments only.
  rpc DeleteFraudster (DeleteFraudsterRequest) returns (DeleteFraudsterResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      delete: "/nuance/biosec/v1/entities/fraudsters/{gk_fraudster_id.value}"
      additional_bindings {
        delete: "/v1/fraudsters/{gk_fraudster_id.value}"
      }
    };
  }

  // Enumerates all of the fraudster's print profiles.
  rpc ListFraudsterProfiles (ListFraudsterProfilesRequest) returns (ListFraudsterProfilesResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/fraudsters/{gk_fraudster_id.value}/profiles"
      additional_bindings {
        get: "/v1/fraudsters/{gk_fraudster_id.value}/profiles"
      }
    };
  }

  /////////////
  // Groups //
  /////////////

  // Creates a new group of persons in the specified scope.
  rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/groups"
      body: "*"
      additional_bindings {
        post: "/v1/groups"
        body: "*"
      }
    };
  }

  // Renames the group's ID.
  rpc RenameGroup (RenameGroupRequest) returns (RenameGroupResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}/rename"
      body: "*"
      additional_bindings {
        patch: "/v1/groups/{gk_group_id.value}/group_id"
        body: "*"
      }
    };
  }

  // Updates the group's details.
  rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}"
      body: "*"
      additional_bindings {
        patch: "/v1/groups/{gk_group_id.value}"
        body: "*"
      }
    };
  }

  // Retrieves the group's details.
  rpc GetGroupDetails (GetGroupDetailsRequest) returns (GetGroupDetailsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}"
      additional_bindings {
        get: "/v1/groups/{gk_group_id.value}"
      }
    };
  }

  // Retrieves the unique ID of the specified group.
  rpc GetGkGroupId (GetGkGroupIdRequest) returns (GetGkGroupIdResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/groups/{group_id}/gkid"
      additional_bindings {
        get: "/v1/groups/{group_id}/gkid"
      }
    };
  }

  // Permanently deletes the group. Does not delete the group members (persons).
  rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      delete: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}"
      additional_bindings {
        delete: "/v1/groups/{gk_group_id.value}"
      }
    };
  }

  // Manage groups members

  // Adds a person to a group.
  rpc AddPersonToGroup (AddPersonToGroupRequest) returns (AddPersonToGroupResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}/persons"
      body: "*"
      additional_bindings {
        post: "/v1/groups/{gk_group_id.value}/persons"
        body: "*"
      }
    };
  }

  // Removes a person from a group.
  rpc RemovePersonsFromGroup (RemovePersonsFromGroupRequest) returns (RemovePersonsFromGroupResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}/remove-persons"
      body: "*"
      additional_bindings {
        post: "/v1/groups/{gk_group_id.value}/persons:batchDelete"
        body: "*"
      }
    };
  }

  // Returns a list of persons that belong to a group.
  rpc ListGroupPersons (ListGroupPersonsRequest) returns (ListGroupPersonsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}/persons"
      additional_bindings {
        get: "/v1/groups/{gk_group_id.value}/persons"
      }
    };
  }

  // Checks if a person is a member of a group.
  rpc IsPersonInGroup (IsPersonInGroupRequest) returns (IsPersonInGroupResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/groups/{gk_group_id.value}/persons/{gk_person_id.value}/member"
      additional_bindings {
        get: "/v1/groups/{gk_group_id.value}/persons/{gk_person_id.value}/member"
      }
    };
  }

  ////////////////
  // Watchlists //
  ////////////////

  // Creates a new watchlist of fraudsters in the specified scope.
  rpc CreateWatchlist (CreateWatchlistRequest) returns (CreateWatchlistResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/watchlists"
      body: "*"
      additional_bindings {
        post: "/v1/watchlists"
        body: "*"
      }
    };
  }

  // Renames the watchlist's ID.
  rpc RenameWatchlist (RenameWatchlistRequest) returns (RenameWatchlistResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}/rename"
      body: "*"
      additional_bindings {
        patch: "/v1/watchlists/{gk_watchlist_id.value}/watchlist_id"
        body: "*"
      }
    };
  }

  // Updates the watchlist's details.
  rpc UpdateWatchlist (UpdateWatchlistRequest) returns (UpdateWatchlistResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      patch: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}"
      body: "*"
      additional_bindings {
        patch: "/v1/watchlists/{gk_watchlist_id.value}"
        body: "*"
      }
    };
  }

  // Retrieves the watchlist's details.
  rpc GetWatchlistDetails (GetWatchlistDetailsRequest) returns (GetWatchlistDetailsResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}"
      additional_bindings {
        get: "/v1/watchlists/{gk_watchlist_id.value}"
      }
    };
  }

  // Retrieves the unique ID of the specified watchlist.
  rpc GetGkWatchlistId (GetGkWatchlistIdRequest) returns (GetGkWatchlistIdResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/watchlists/{watchlist_id}/gkid"
      additional_bindings {
        get: "/v1/watchlists/{watchlist_id}/gkid"
      }
    };
  }

  // Permanently deletes the watchlist.
  rpc DeleteWatchlist (DeleteWatchlistRequest) returns (DeleteWatchlistResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      delete: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}"
      additional_bindings {
        delete: "/v1/watchlists/{gk_watchlist_id.value}"
      }
    };
  }

  // Manage watchlists members

  // Adds a fraudster to a watchlist.
  rpc AddFraudsterToWatchlist (AddFraudsterToWatchlistRequest) returns (AddFraudsterToWatchlistResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}/fraudsters"
      body: "*"
      additional_bindings {
        post: "/v1/watchlists/{gk_watchlist_id.value}/fraudsters"
        body: "*"
      }
    };
  }

  // Removes a fraudster from a watchlist.
  rpc RemoveFraudstersFromWatchlist (RemoveFraudstersFromWatchlistRequest) returns (RemoveFraudstersFromWatchlistResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      post: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}/remove-fraudsters"
      body: "*"
      additional_bindings {
        post: "/v1/watchlists/{gk_watchlist_id.value}/fraudsters:batchDelete"
        body: "*"
      }
    };
  }

  // Returns a list of fraudsters that belong to a watchlist.
  rpc ListWatchlistFraudsters (ListWatchlistFraudstersRequest) returns (ListWatchlistFraudstersResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}/fraudsters"
      additional_bindings {
        get: "/v1/watchlists/{gk_watchlist_id.value}/fraudsters"
      }
    };
  }

  // Checks if a fraudster is a member of a watchlist.
  rpc IsFraudsterInWatchlist (IsFraudsterInWatchlistRequest) returns (IsFraudsterInWatchlistResponse) {
    option (google.api.http) = {
      // Deprecated. Use the endpoint from additional bindings
      get: "/nuance/biosec/v1/entities/watchlists/{gk_watchlist_id.value}/fraudsters/{gk_fraudster_id.value}/member"
      additional_bindings {
        get: "/v1/watchlists/{gk_watchlist_id.value}/fraudsters/{gk_fraudster_id.value}/member"
      }
    };
  }
  // Adds a caller ID rule to the caller ID watchlist.
  // Returns the ALREADY_EXISTS [status code](#nuance.rpc.StatusCode) when caller ID rule with given phone number or caller ID regex already exists.
  rpc AddCallerIdRuleToWatchlist (AddCallerIdRuleToWatchlistRequest) returns (AddCallerIdRuleToWatchlistResponse) {
    option (google.api.http) = {
      post: "/v1/calleridwatchlists/{gk_callerid_watchlist_id.value}/rules"
      body: "*"
    };
  }

  // Deletes a caller ID rule from the caller ID watchlist.
  // Returns the NOT_FOUND [status code](#nuance.rpc.StatusCode) when caller ID rule with given 'gk_caller_id_rule_id' is not found.
  rpc DeleteCallerIdRuleFromWatchlist (DeleteCallerIdRuleFromWatchlistRequest) returns (DeleteCallerIdRuleFromWatchlistResponse) {
    option (google.api.http) = {
      delete: "/v1/calleridwatchlists/{gk_callerid_watchlist_id.value}/rules/{gk_callerid_rule_id.value}"
    };
  }

  // Updates a caller ID rule within the caller ID watchlist.
  // Returns the ALREADY_EXISTS [status code](#nuance.rpc.StatusCode) when the caller ID rule, with given phone number or caller ID regex already exists.
  rpc UpdateCallerIdRuleInWatchlist (UpdateCallerIdRuleInWatchlistRequest) returns (UpdateCallerIdRuleInWatchlistResponse) {
    option (google.api.http) = {
      put: "/v1/calleridwatchlists/{gk_callerid_watchlist_id.value}/rules/{gk_callerid_rule_id.value}"
      body: "*"
    };
  }

  // Gets all caller ID rules from caller ID watchlist. Returns the list of caller id rules in descending order of creation.
  rpc ListWatchlistCallerIdRules (ListWatchlistCallerIdRulesRequest) returns (ListWatchlistCallerIdRulesResponse) {
    option (google.api.http) = {
      get: "/v1/calleridwatchlists/{gk_callerid_watchlist_id.value}/rules"
    };
  }


  // Imports the caller ID rules to the caller ID watchlist. Data must be in the CSV format.
  // In case of record conflicts, the original record is kept and the new record is returned as a part of failed rules list.
  // Returns the BAD_REQUEST [status code](#nuance.rpc.StatusCode) if file fails to parse.
  rpc ImportCallerIdRulesToWatchlist (ImportCallerIdRulesToWatchlistRequest) returns (ImportCallerIdRulesToWatchlistResponse) {
    option (google.api.http) = {
      put: "/v1/calleridwatchlists/{gk_callerid_watchlist_id.value}/rules:import"
      body: "*"
    };
  }

  // Exports the caller ID rules within the caller ID watchlist.
  rpc ExportCallerIdRulesFromWatchlist (ExportCallerIdRulesFromWatchlistRequest) returns (ExportCallerIdRulesFromWatchlistResponse) {
    option (google.api.http) = {
      get: "/v1/calleridwatchlists/{gk_callerid_watchlist_id.value}/rules:export"
    };
  }

  // Tests the phone number against the given caller ID regex. In case of invalid phone number or caller_id_regex, it returns the INVALID REQUEST [status code](#nuance.rpc.StatusCode)
  rpc TestCallerIdRule (TestCallerIdRuleRequest) returns (TestCallerIdRuleResponse) {
    option (google.api.http) = {
      get: "/v1/calleridwatchlists/inline/rule:test"
    };
  }

}
