/*-
 * #%L
 * gatekeeper-api-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.azman;

option java_package = "com.nuance.rpc.biosec.v1.azman";
option java_multiple_files = true;

import "nuance/biosec/v1/common_types.proto";
import "nuance/rpc/status.proto";
import "google/protobuf/timestamp.proto";

// Contains operation details.
message OperationResult {
  // Determines if the specified operation is allowed.
  bool allowed = 1;
  // Operation ID.
  string operation_id = 2;
}

///////////
// Roles //
///////////

// Input message that defines parameters for [CreateRole](#CreateRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message CreateRoleRequest {
  // Mandatory. General request context. Specifies the scope in which the role should be created.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The new role's ID. Role IDs are unique in a given scope.
  string role_id = 2;
  // Optional. The role’s description.
  string description = 3;
}

// Output message that defines parameters returned by [CreateRole](#CreateRole).
message CreateRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The newly created role's ID. Role IDs are globally unique.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
}

// Input message that defines parameters for [GetRoleId](#GetRoleId).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetRoleIdRequest {
  // Mandatory. General request context. Specifies the scope of the requested role.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
}

// Output message that defines parameters returned by [GetRoleId](#GetRoleId).
message GetRoleIdResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The role's ID.
  string role_id = 2;
}

// Input message that defines parameters for [GetGkRoleId](#GetGkRoleId).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetGkRoleIdRequest {
  // Mandatory. General request context. Specifies the scope of the requested Role.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The role's ID.
  string role_id = 2;
}

// Output message that defines parameters returned by [GetGkRoleId](#GetGkRoleId).
message GetGkRoleIdResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
}

// Input message that defines parameters for [DeleteRole](#DeleteRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message DeleteRoleRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
}

// Output message that defines parameters returned by [DeleteRole](#DeleteRole).
message DeleteRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [ListRoles](#ListRoles).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message ListRolesRequest {
  // Mandatory. General request context. Specifies the scope that the roles belong to.
  nuance.biosec.v1.Context context = 1;
}

// Output message that defines parameters returned by [ListRoles](#ListRoles).
message ListRolesResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // List of scopes details.
  repeated RoleDetailsForRead details = 2;
}

// Contains the readable fields of the scope. Included in [ListRolesResponse](#ListRolesResponse).
message RoleDetailsForRead {
  // Role unique ID.
  nuance.biosec.v1.UniqueId gk_role_id = 1;
  // Role identifier. Must be unique at least at the scope level.
  string role_id = 2;
}

// Input message that defines parameters for [CloneRole](#CloneRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message CloneRoleRequest {
  // Mandatory. General request context. Specifies the scope in which the role should be cloned.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The new role's ID. Role IDs are unique in a given scope.
  string role_id = 2;
  // Mandatory. Source role ID to clone from.
  nuance.biosec.v1.UniqueId source_gk_role_id = 3;
}

// Output message that defines parameters returned by [CloneRole](#CloneRole).
message CloneRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The newly created role's ID. Role IDs are globally unique.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
}

// Input message that defines parameters for [ResetFactoryRole](#ResetFactoryRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message ResetFactoryRoleRequest {
  // Mandatory. General request context. Specifies the scope in which the Role should be cloned.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Factory role IDs are unique in a given scope.
  string role_id = 2;
}

// Output message that defines parameters returned by [ResetFactoryRole](#ResetFactoryRole).
message ResetFactoryRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [SetRoleDescription](#SetRoleDescription).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message SetRoleDescriptionRequest {
  // Mandatory. General request context. Specifies the scope in which the Role should be cloned.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
  // Optional. The role’s description.
  string description = 3;
}

// Output message that defines parameters returned by [SetRoleDescription](#SetRoleDescription).
message SetRoleDescriptionResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [GetRoleDetails](#GetRoleDetails).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetRoleDetailsRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
}

// Output message that defines parameters returned by [GetRoleDetails](#GetRoleDetails).
message GetRoleDetailsResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Operation IDs or wildcards that are allowed in the role.
  repeated string allowed_rules = 2;
  // Operation IDs or wildcards that are denied in the role.
  repeated string denied_rules = 3;
  // Role description
  string description = 4;
}

///////////
// Rules //
///////////

// Input message that defines parameters for [AddRulesToRole](#AddRulesToRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message AddRulesToRoleRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
  // Optional. One or more operations IDs or wildcards that the method adds to the role’s allow list.
  repeated string allow = 3;
  // Optional. One or more operations IDs or wildcards that the method adds to the role’s deny list.
  repeated string deny = 4;
}
// Output message that defines parameters returned by [AddRulesToRole](#AddRulesToRole).
message AddRulesToRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [RemoveRulesFromRole](#RemoveRulesFromRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message RemoveRulesFromRoleRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
  // Optional. One or more operations IDs or wildcards that the method adds to the role’s allow list.
  repeated string allow = 3;
  // Optional. One or more operations IDs or wildcards that the method adds to the role’s deny list.
  repeated string deny = 4;
}

// Output message that defines parameters returned by [RemoveRulesFromRole](#RemoveRulesFromRole).
message RemoveRulesFromRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

/////////////
// Members //
/////////////

// This message contains user details including groups used in [GetUserInfoResponse](#GetUserInfoResponse).
message UserInfo {
  // Contains user details.
  nuance.biosec.v1.Member member = 1;
  // List of groups that the user is assigned to.
  repeated string groups = 2;
}

// Input message that defines parameters for [AddMemberToRole](#AddMemberToRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message AddMemberToRoleRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
  // Mandatory. The member that the method adds the role to.
  nuance.biosec.v1.Member member = 3;
}

// Output message that defines parameters returned by [AddMemberToRole](#AddMemberToRole).
message AddMemberToRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [RemoveMemberFromRole](#RemoveMemberFromRole).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message RemoveMemberFromRoleRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
  // Mandatory. The member that the method removes the role from.
  nuance.biosec.v1.Member member = 3;
}

// Output message that defines parameters returned by [RemoveMemberFromRole](#RemoveMemberFromRole).
message RemoveMemberFromRoleResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [SetMemberLabel](#SetMemberLabel).
message SetMemberLabelRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The member in question. Member.type field value is ignored
  nuance.biosec.v1.Member member = 2;
}

// Output message that defines parameters returned by [SetMemberLabel](#SetMemberLabel).
message SetMemberLabelResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [ListAssignedRoles](#ListAssignedRoles).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message ListAssignedRolesRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The member in question.
  nuance.biosec.v1.Member member = 2;
}

// Output message that defines parameters returned by [ListAssignedRoles](#ListAssignedRoles).
message ListAssignedRolesResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // List of role IDs.
  repeated nuance.biosec.v1.UniqueId gk_role_ids = 2;
}

// Input message that defines parameters for [ListScopeMembers](#ListScopeMembers).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message ListScopeMembersRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
}

// Output message that defines parameters returned by [ListScopeMembers](#ListScopeMembers).
message ListScopeMembersResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Mandatory. The members in question.
  repeated nuance.biosec.v1.Member members = 2;
}

// Input message that defines parameters for [ClearScopeMemberCache](#ClearScopeMemberCache).
message ClearScopeMemberCacheRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The member in question.
  nuance.biosec.v1.Member member = 2;
}

// Output message that defines parameters returned by [ClearScopeMemberCache](#ClearScopeMemberCache).
message ClearScopeMemberCacheResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

///////////////////
// Authorization //
///////////////////

// Input message that defines parameters for [GetAuthorizationDetails](#GetAuthorizationDetails).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message GetAuthorizationDetailsRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The member in question.
  nuance.biosec.v1.Member member = 2;
}

// Output message that defines parameters returned by [GetAuthorizationDetails](#GetAuthorizationDetails).
message GetAuthorizationDetailsResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // List of allowed operations IDs or wildcards.
  repeated string allowed_rules = 2;
  // List of denied operations IDs or wildcards.
  repeated string denied_rules = 3;
}

// Input message that defines parameters for [ListRoleMembers](#ListRoleMembers).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message ListRoleMembersRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. Unique role ID.
  nuance.biosec.v1.UniqueId gk_role_id = 2;
}

// Output message that defines parameters returned by [ListRoleMembers](#ListRoleMembers).
message ListRoleMembersResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // List of members' information.
  repeated nuance.biosec.v1.Member members = 2;
}

// Input message that defines parameters for [IsAuthorized](#IsAuthorized).
// Member identifiers are taken from pre-defined headers.
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message IsAuthorizedRequest {
  // Mandatory. General request context, contains the scope.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The operation ID in question.
  string operation_id = 2;
}

// Output message that defines parameters returned by [IsAuthorized](#IsAuthorized).
message IsAuthorizedResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // When set to true, the user is authorized to operate in this context.
  bool is_authorized = 2;
  // Contains information about the user returned by [GetUserInfo](#GetUserInfo).
  UserInfo user_info = 3;
}

// Input message that defines parameters for [IsAuthorizedMany](#IsAuthorizedMany).
// Member identifiers are taken from pre-defined headers.
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Mandatory
// * configset_id: Not used
message IsAuthorizedManyRequest {
  // Mandatory. General request context, contains the scope.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The operations IDs in question.
  repeated string operations_ids = 2;
}

// Output message that defines parameters returned by [IsAuthorized](#IsAuthorized).
message IsAuthorizedManyResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Contains information about the user returned by [GetUserInfo](#GetUserInfo).
  UserInfo user_info = 2;
  // Contains a list of operations and a boolean value for each operation.
  repeated OperationResult operations_result = 3;
}

// Input message that defines parameters for [ListAuthorizedScopes](#ListAuthorizedScopes).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Not used
// * configset_id: Not used
message ListAuthorizedScopesRequest {
  // Mandatory. General request context, contains the scope.
  nuance.biosec.v1.Context context = 1;
}

// Output message that defines parameters returned by [ListAuthorizedScopes](#ListAuthorizedScopes).
message ListAuthorizedScopesResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // List of Scope IDs.
  repeated nuance.biosec.v1.UniqueId gk_scope_ids = 2;
}

// Input message that defines parameters for [GetUserInfo](#GetUserInfo).
//
// Uses the context field as follows:
//
// * gk_engagement_id: Not used
// * gk_session_id: Not used
// * gk_scope_id: Not used
// * configset_id: Not used
message GetUserInfoRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
}

// Output message that defines parameters returned by [GetUserInfo](#GetUserInfo).
message GetUserInfoResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // User information.
  UserInfo user_info  = 2;
  // List of Scope IDs.
  repeated nuance.biosec.v1.UniqueId gk_scope_ids = 3;
}

message GetLastAuthorizedRequest {
  // Mandatory. General request context.
  nuance.biosec.v1.Context context = 1;
  // Mandatory. The member in question.
  nuance.biosec.v1.Member member = 2;
}

message GetLastAuthorizedResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Date and time of last authorized.
  google.protobuf.Timestamp last_authorized = 2;
}