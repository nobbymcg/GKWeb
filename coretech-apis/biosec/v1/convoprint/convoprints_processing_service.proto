/*-
 * #%L
 * gatekeeper-api-protoc
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.biosec.v1.convoprint;

option java_package = "com.nuance.rpc.biosec.v1.convoprint";
option java_multiple_files = true;

import "nuance/biosec/v1/convoprint/convoprints_processing_messages.proto";
import "google/api/annotations.proto";

//////////////////////////////////
// Convoprint gRPC APIs Service //
//////////////////////////////////

// This service allows performing basic text biometrics operations.
// Service methods are typically used in self-service applications such as active authentication via the IVR.
//
// Here is a typical enrollment workflow:
//
// 1. [StartEngagement](#StartEngagement)
// 2. [StartSession](#StartSession)
// 3. [GetGkConvoprintProfileId](#GetGkConvoprintProfileId) to get the internal ID.
// 4. If the convoprint profile exists, continue to 4b. If not, create one in step 4a.
//    1. [CreateConvoprintProfile](#CreateConvoprintProfile)
//    2. [GetEnrollStatus](#GetEnrollStatus) - Checks if the convoprint profile is trained.
// 5. [ProcessText](#ProcessText)
// 6. [Enroll](#Enroll) - Repeat steps five and six, until the convoprint is ready to be trained.
// 7. [Train](#Train)
// 8. [StopSession](#StopSession)
// 9. [StopEngagement](#StopEngagement)
//
// Here is a typical verification workflow:
//
// 1. [StartEngagement](#StartEngagement)
// 2. [StartSession](#StartSession)
// 3. [GetGkConvoprintProfileId](#GetGkConvoprintProfileId) to get the internal ID.
// 4. [GetEnrollStatus](#GetEnrollStatus) - Checks if the convoprint profile is trained.
// 5. [Verify](#Verify)
// 6. [GetSessionDecision](#GetSessionDecision)
// 7. [StopSession](#StopSession)
// 8. [StopEngagement](#StopEngagement)
service ConvoprintsProcessor {

  // Processes the text and checks its quality.
  // Creates a text model identified by gk_text_id that the system uses in consequent operations, such as [Enroll](#Enroll) or [Verify](#Verify).
  rpc ProcessText (ProcessTextRequest) returns (ProcessTextResponse) {
    option (google.api.http) = {
      post: "/v1/texts/process"
      body: "*"
    };
  }

  // Adds processed text to the convoprint's enrollment segments collection.
  // The system uses the processed text in this collection when it creates the convoprint's template ([Train](#Train)).
  // Accepts a convoprint profile ID and text ID returned by the [ProcessText](#ProcessText) method.
  // Returns the convoprint status information, indicating whether it is ready to be trained or not.
  rpc Enroll (EnrollRequest) returns (EnrollResponse) {
    option (google.api.http) = {
      post: "/v1/convoprints/{gk_convoprint_profile_id.value}/enrollment"
      body: "*"
    };
  }

  // Returns the convoprint status information, indicating whether it is trained, ready to be trained, or not ready.
  rpc GetEnrollStatus(GetEnrollStatusRequest) returns (GetEnrollStatusResponse) {
    option (google.api.http) = {
      get: "/v1/convoprints/{gk_convoprint_profile_id.value}/enrollment-status"
    };
  }

  // Creates a new text template for a convoprint profile using text (typically text models) from the enrollment segments collection.
  rpc Train (TrainRequest) returns (TrainResponse) {
    option (google.api.http) = {
      post: "/v1/convoprints/{gk_convoprint_profile_id.value}/training"
      body: "*"
    };
  }

  // Checks if a given text matches the specified convoprint profile.
  rpc Verify (VerifyRequest) returns (VerifyResponse) {
    option (google.api.http) = {
      post: "/v1/convoprints/{gk_convoprint_profile_id.value}/verification"
      body: "*"
    };
  }

  // Checks if a given text matches any of the convoprint profiles specified.
  // Typically used with a small or medium size group (1-100).
  rpc Identify (IdentifyRequest) returns (IdentifyResponse) {
    option (google.api.http) = {
      post: "/v1/convoprints/identification"
      body: "*"
    };
  }

  // Checks if a given text matches any of the convoprint profiles specified in a watchlist.
  rpc DetectKnownFraudsters (DetectKnownFraudstersRequest) returns (DetectKnownFraudstersResponse) {
    option (google.api.http) = {
      post: "/v1/convoprints/known-fraudsters-detection"
      body: "*"
    };
  }
}
