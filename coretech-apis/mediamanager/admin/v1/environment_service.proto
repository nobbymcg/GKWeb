/*-
 * #%L
 * admin-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.admin.v1;

import "nuance/rpc/status.proto";

option java_package = "com.nuance.rpc.mediamanager.admin.v1";
option java_multiple_files = true;


// The EnvironmentService is responsible for managing and organizing environments associated to tenants within
// Media Manager. Customers typically have multiple deployment environments like development, QA or production.
// A tenant may have one or more environments and an Environment can span across multiple Data Centers and
// one Data Center can have multiple Environments.
service EnvironmentService {

  // Create a new Environment for the specified Tenant.
  // When a request to create a new Environment is made the service will verify if Environment already exists in storage.
  // If the Environment exists the service will apply an update to the Environment and return the status
  // already exists. If the Environment does not exist the service will create and return the new Environment and
  // add the Environment ID to the Tenant's set mapped Environments.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc CreateEnvironment (CreateEnvironmentRequest) returns (CreateEnvironmentResponse) {}

  // Get specified Environment.
  // When request to get an Environment is made the service will search based on the provided Environment ID.
  // If found service will return the Environment otherwise will return status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc GetEnvironment (GetEnvironmentRequest) returns (GetEnvironmentResponse) {}

  // Update specified Environment.
  // When a request to update an Environment is made the service will verify if it exist in storage.
  // If the Environment exists the service will apply an update to the Environment and return the updated
  // Environment in the response. If the Environment does not exist the service will return a response with a status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc UpdateEnvironment (UpdateEnvironmentRequest) returns (UpdateEnvironmentResponse) {}

  // Delete specified Environment.
  // When request to delete an Environment is made the service will search based on the provided Environment ID.
  // If found the Environment is flagged as deleted and removed from the Tenants Environment listing, otherwise service
  // returns the status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc DeleteEnvironment (DeleteEnvironmentRequest) returns (DeleteEnvironmentResponse) {}

  // List specified Environments.
  // When request to get a listing of Environments is made the service will search based on the provided Tenant ID.
  // If found, the list of Environments will be returned, otherwise service returns the status not found.
  rpc ListEnvironments (ListEnvironmentsRequest) returns (ListEnvironmentsResponse) {}
}

// Input message that defines parameters for [CreateEnvironment](#CreateEnvironment).
message CreateEnvironmentRequest {
  // Mandatory. Fields that method will use for environment creation.
  EnvironmentInfo environment_info = 1;
}

// Output message that defines the parameters returned by [CreateEnvironment](#CreateEnvironment).
message CreateEnvironmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Environment details.
  Environment environment = 2;
}

// Input message that defines parameters for [GetEnvironment](#GetEnvironment).
message GetEnvironmentRequest {
  // Mandatory. Unique ID for Environment.
  string environment_id = 1;
}

// Output message that defines the parameters returned by [GetEnvironment](#GetEnvironment).
message GetEnvironmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Environment details.
  Environment environment = 2;
}

// Input message that defines parameters for [UpdateEnvironment](#UpdateEnvironment).
message UpdateEnvironmentRequest {
  // Mandatory. Unique ID for Environment.
  string environment_id = 1;
  // Mandatory. Environment fields to set or update.
  EnvironmentInfo environment_info = 2;
}

// Output message that defines the parameters returned by [UpdateEnvironment](#UpdateEnvironment).
message UpdateEnvironmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Environment details.
  Environment environment = 2;
}

// Input message that defines parameters for [DeleteEnvironment](#DeleteEnvironment).
message DeleteEnvironmentRequest {
  // Mandatory. Unique ID for Environment.
  string environment_id = 1;
}

// Output message that defines the parameters returned by [DeleteEnvironment](#DeleteEnvironment).
message DeleteEnvironmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [ListEnvironments](#ListEnvironments).
message ListEnvironmentsRequest {
  // Mandatory. Unique ID for Tenant.
  string tenant_id = 1;
}

// Output message that defines the parameters returned by [ListEnvironments](#ListEnvironments).
message ListEnvironmentsResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The list of Environments.
  repeated Environment environments = 2;
}

// Input message that defines parameters for [CreateEnvironment](#CreateEnvironment).
message Environment {
  // Unique ID for Environment.
  string environment_id = 1;
  // EnvironmentInfo info.
  EnvironmentInfo environment_info = 2;
}


// Contains information about the Environment.
message EnvironmentInfo {
  // Mandatory. Unique ID for Tenant.
  string tenant_id = 1;
  // Mandatory. Environment name (minimum length 2 maximum length 50).
  string name = 2;
  // Optional. Environment description (minimum length 2 maximum length 250).
  string description = 3;
}
