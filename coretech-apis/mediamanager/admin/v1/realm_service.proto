/*-
 * #%L
 * admin-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.admin.v1;

import "nuance/rpc/status.proto";

option java_package = "com.nuance.rpc.mediamanager.admin.v1";
option java_multiple_files = true;


// The RealmService is responsible for managing and organizing realms within Media Manager. The managed Realm entities are
// a logical grouping of data that includes
// 1. Datacenters: Where IT and telephony components are deployed typically one or more.
// 2. Environments: Multiple Environments like production, development etc.
// 3. Realm Overlapping: different Realms can be associated with the same Datacenter or Environment.
// 4. Tenant: Can have one or more Realms.
// 5. Realm configuration: Realms are associated to one configuration that includes settings for
//   storage and encryption.

service RealmService {

  // Create new Realm for the specified Tenant.
  // When a request to create a new Realm is made the service will verify if Realm already exists in storage.
  // If the Realm exists the service will apply an update to the Realm and return the status
  // already exists. If the Realm does not exist the service will create and return the new Realm.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc CreateRealm (CreateRealmRequest) returns (CreateRealmResponse) {}

  // Get specified Realm.
  // When request to get a Realm is made the service will search based on the provided Realm ID.
  // If found service will return the Realm otherwise will return status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc GetRealm (GetRealmRequest) returns (GetRealmResponse) {}

  // Update specified Realm.
  // When a request to update a Realm is made the service will verify if it exist in storage.
  // If the Realm exists the service will apply an update to the Realm and return the updated
  // Realm in the response. If the Realm does not exist the service will return a response with a status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc UpdateRealm (UpdateRealmRequest) returns (UpdateRealmResponse) {}

  // Delete specified Realm.
  // When request to delete a Realm is made the service will search based on the provided Realm ID.
  // If found the Realm is flagged as deleted and removed from the Tenants Realm listing, otherwise service
  // returns the status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc DeleteRealm (DeleteRealmRequest) returns (DeleteRealmResponse) {}

  // Add new Environment to Realm.
  // When AddEnvironment request is made the service first verifies the Environment exists.
  // If Environment is valid it is added to the Realm, if the Realm already has a mapped Environment
  // it is replaced with the current request. If service does not find the Environment the service
  // returns the status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc AddEnvironment (AddEnvironmentRequest) returns (AddEnvironmentResponse) {}

  // Remove Environment from Realm.
  // When RemoveEnvironment request is made the service first verifies the Environment exists.
  // If Environment is valid it is removed from the Realm's mapped Environment.
  // If service does not find the Environment status not found is returned in the response.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc RemoveEnvironment (RemoveEnvironmentRequest) returns (RemoveEnvironmentResponse) {}

  // Add new Datacenters to Realm.
  // When AddDatacenter request is made the service first verifies the Datacenter exists.
  // If Datacenter is valid it is added to the Realm's listing of mapped Datacenters.
  // If service does not find the Datacenter the service returns the status not found.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc AddDatacenter (AddDatacenterRequest) returns (AddDatacenterResponse) {}

  // Remove Datacenters from Realm.
  // When RemoveDatacenter request is made the service first verifies the Datacenter exists.
  // If Datacenter is valid it is removed from the Realm's mapped listing of Datacenters.
  // If service does not find the Datacenter status not found is returned in the response.
  // If mandatory fields are missing or incorrectly formatted the response will return a listing of the violations.
  rpc RemoveDatacenter (RemoveDatacenterRequest) returns (RemoveDatacenterResponse) {}

  // List specified Realms.
  // When request to get a listing of Realms is made the service will search based on the provided Tenant ID.
  // If found, the list of Realms will be returned, otherwise service returns the status not found.
  rpc ListRealms (ListRealmsRequest) returns (ListRealmsResponse) {}
}


// Input message that defines the parameters for [CreateRealm](#CreateRealm).
message CreateRealmRequest {
  // Mandatory. Fields that method will use for entity creation.
  RealmInfo realm_info = 1;
}

// Output message that defines the parameters returned by [CreateRealm](#CreateRealm).
message CreateRealmResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Realm data.
  Realm realm = 2;
}

// Input message that defines the parameters for [GetRealm](#GetRealm).
message GetRealmRequest {
  // Mandatory. Unique ID of the Realm.
  string realm_id = 1;
}

// Output message that defines the parameters returned by [GetRealm](#GetRealm).
message GetRealmResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Realm data.
  Realm realm = 2;
}

// Input message that defines the parameters for [UpdateRealm](#UpdateRealm).
message UpdateRealmRequest {
  // Mandatory. Unique ID of the Realm.
  string realm_id = 1;
  // Mandatory. Fields that the method will set or update.
  RealmInfo realm_info = 2;
}

// Output message that defines the parameters returned by [UpdateRealm](#UpdateRealm).
message UpdateRealmResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Realm data.
  Realm realm = 2;
}

// Input message that defines the parameters for [DeleteRealm](#DeleteRealm).
message DeleteRealmRequest {
  // Mandatory. Unique ID of the Realm.
  string realm_id = 1;
}

// Output message that defines the parameters returned by [DeleteRealm](#DeleteRealm).
message DeleteRealmResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines the parameters for [AddEnvironment](#AddEnvironment).
message AddEnvironmentRequest {
  // Mandatory. Unique ID of the Realm.
  string realm_id = 1;
  // Mandatory. Unique ID of the Environment.
  string environment_id = 2;
}

// Output message that defines the parameters returned by [AddEnvironment](#AddEnvironment).
message AddEnvironmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines the parameters for [RemoveEnvironment](#RemoveEnvironment).
message RemoveEnvironmentRequest {
  // Mandatory. Unique ID of the Realm.
  string realm_id = 1;
  // Mandatory. Unique ID of the Environment.
  string environment_id = 2;
}

// Output message that defines the parameters returned by [RemoveEnvironment](#RemoveEnvironment).
message RemoveEnvironmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines the parameters for [AddDatacenter](#AddDatacenter).
message AddDatacenterRequest {
  // Mandatory. Unique ID of the Realm.
  string realm_id = 1;
  // Mandatory. Unique ID of the Datacenter.
  string datacenter_id = 2;
}

// Output message that defines the parameters returned by [AddDatacenter](#AddDatacenter).
message AddDatacenterResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines the parameters for [RemoveDatacenter](#RemoveDatacenter).
message RemoveDatacenterRequest {
  // Mandatory. Unique ID of the Realm.
  string realm_id = 1;
  // Mandatory. Unique ID of the Datacenter.
  string datacenter_id = 2;
}

// Output message that defines the parameters returned by [RemoveDatacenter](#RemoveDatacenter).
message RemoveDatacenterResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines the parameters for [ListRealms](#ListRealms).
message ListRealmsRequest {
  // Mandatory. Unique ID of the Tenant.
  string tenant_id = 1;
}

// Output message that defines the parameters returned by [ListRealms](#ListRealms).
message ListRealmsResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The list of Realms.
  repeated Realm realm = 2;
}

// Contains detail information about the Realm. Included in [CreateRealm](#CreateRealm).
message Realm {
  // Unique ID of the Realm.
  string realm_id = 1;
  // RealmInfo message fields.
  RealmInfo realm_info = 2;
  // Unique ID of the Environment.
  string environment_id = 3;
  // Unique IDs of the datacenters.
  repeated string datacenters = 4;
  // Unique ID of the Realm configuration.
  string configuration_id = 5;
}

// Contains information about the Realm. Included in Realm message [Realm](#Realm).
message RealmInfo {
  // Mandatory. Realm name(min length 2 max 50).
  string name = 1;
  // Optional. Realm description (max length 250).
  string description = 2;
  // Mandatory. Unique ID of the Tenant.
  string tenant_id = 3;
}
