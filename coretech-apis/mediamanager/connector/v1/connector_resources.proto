/*-
 * #%L
 * media-manager-api-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.connector.v1;

option java_multiple_files = true;
option java_package = "com.nuance.rpc.mediamanager.connector.v1";

/*
ConnectorType listing of valid connector types.
 */
enum ConnectorType {
  // Unspecified connector type.
  CONNECTOR_TYPE_UNSPECIFIED = 0;
  // Media connector.
  CONNECTOR_TYPE_MEDIA = 1;
  // CTI connector.
  CONNECTOR_TYPE_CTI = 2;
  // SIPREC connector. Deprecated.
  CONNECTOR_TYPE_SIPREC = 3;
  // Generic connector.
  CONNECTOR_TYPE_GENERIC = 4;
  // Recording controller connector.
  CONNECTOR_TYPE_RCC = 5;
  // OVS connector.
  CONNECTOR_TYPE_OVS = 6;
}

/*
ConnectorStatus listing of the possible status of a given connector.
 */
enum ConnectorStatus {
  CONNECTOR_STATUS_UNSPECIFIED = 0;  // Connector unspecified status.
  CONNECTOR_STATUS_INITIALIZING = 1;  // Connector initializing status.
  CONNECTOR_STATUS_ACTIVE = 2;  // Connector active status.
  CONNECTOR_STATUS_PASSIVE = 3;  // Connector passive status.
  CONNECTOR_STATUS_STOPPING = 4;  // Connector stopping status.
  CONNECTOR_STATUS_ERROR = 5;  // Connector error status.
  CONNECTOR_STATUS_FATAL = 6;  // Connector fatal status.
}

// Provides diagnostic information information about request processing steps.
message DiagnosticTrace {
  // Mandatory. The type of connector involved in the request processing.
  ConnectorType connector_type = 1;
  // Mandatory. The ID of the connector involved in the request processing.
  string connector_id = 2;
  // Mandatory. The ID of the specific connector instance involved in the request processing.
  string external_connector_id = 3;
}

/*
ConnectorConfig message data elements.
 */
message ConnectorConfig {
  string connector_config_id = 1;  // Required. Connector configuration identifier.
  ConnectorConfigInfo connector_config_info = 2;  // Required. Connector Type.
}

/*
ConnectorConfigInfo message data elements.
 */
message ConnectorConfigInfo {
  ConnectorType connector_type = 1;  // Required. Connector Type.
  string description = 2;  // Optional. Connector description (max length 250).
  string tenant_id = 3;  // Required. Tenant identifier.
  string realm_id = 4;  // Required. Realm identifier.
  repeated ConfigParameter config_parameters = 10;  // Required.
}

/*
ConfigParameter message data elements.
 */
message ConfigParameter {
  string name = 1;  // Required. Name of the ConfigParameter (minimum length 2 maximum length 50).
  oneof value {  // Required. ConfigParameter value.
    string string_value = 2;
    bool boolean_value = 3;
    int32 integer_value = 4;
    int64 long_value = 5;
    float float_value = 6;
  }
}

/*
 * Provides information about a Connector metrics.
 */
message ConnectorMetrics {
  int32 current_load = 1;  // Required. ConnectorMetrics current load.
  map<string, int32> metric_details = 10;  // Required. ConnectorMetrics details.
}

/*
 * Provides information about a Call Identifier.
 */
message CallIdentifier {
  string call_id = 1; // Required. Call id.
}

/*
 * Provides information about an Agent
 */
message AgentInfo {
  string agent_id = 1;  // Optional. Agent id.
  string extension = 2; // Required. Agent extension.
}

/*
 * Provides Media Connector port and session info
 */
message MediaCoordinationInfo {
  // Mandatory. Represents the Media Connector session id obtained from Connector Manager.
  string connector_session_id = 1;
  // Mandatory. Represents the Side One port. Used for mono or stereo.
  int32 side_1_port = 2;
  // Mandatory. Represents the Side Two port. Used for stereo only.
  int32 side_2_port = 3;
}