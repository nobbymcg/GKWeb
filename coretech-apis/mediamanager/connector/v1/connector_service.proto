/*-
 * #%L
 * media-manager-api-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.connector.v1;

import "nuance/mediamanager/connector/v1/connector_resources.proto";
import "nuance/rpc/status.proto";
import "google/protobuf/any.proto";

option java_multiple_files = true;
option java_package = "com.nuance.rpc.mediamanager.connector.v1";

// This service provides connectivity operations for Media Manager connectors.
// A connector must have a dedicated connector ID created by Media Manager, which is used for session creation.
// Multiple connectors of the same type can share the same connector ID. However each connector will have it's own session.
// The connector must create a session first by calling CreateSession. If successful, the connector needs to initialize
// using the provided configuration. Once configured, the connector should call StartSession using the connector session ID
// returned by the CreateSession operation. If the session is disconnected, the connector should retry using the same
// connector_session_id.
// When a connector shuts down or restart, it should call DeleteSession. This will invalidate the session.
service ConnectorService {
  // Creates a new connector session.
  rpc CreateSession (CreateSessionRequest) returns (CreateSessionResponse);

  // Starts a bi-directional stream for a connector session.
  // StartSession can be called at anytime when connector believes necessary.
  // e.g.: when connector believes it has lost connection with connector manager,
  // connector can call StartSession with the same connector_session_id to re-establish the connection.
  // If within a configurable time, a connector with losing connection does not call StartSession, the connector_session_id will be deleted by media manager.
  // Then connector needs to call CreateSession again to obtain a new connector_session_id.
  // The first message after the StartSession should be StartSessionRequest. Media Manager will respond with a
  // StartSessionResponse message.
  // Connector can send ConnectorMessage messages at any time, providing a ConnectorStatusDetails message.
  // Media Manager will send a ConnectorManagerMessage containing a StatusCommand message. The connector should respond
  // providing a ConnectorStatusDetails message. After a configured number of retries (usually 3), if the connector does
  // not respond, Media Manager will deem the connector as inactive and will stop sending commands.
  // A ConnectorCommand must be processed and responded with a ConnectorCommandResponse with the corresponding command ID.
  rpc StartSession (stream ConnectorMessage) returns (stream ConnectorManagerMessage);

  // Deletes a connector session.
  rpc DeleteSession (DeleteSessionRequest) returns (DeleteSessionResponse);

  // Provides the current connector configuration.
  // Should be called when the connector receives a ReloadConfigCommand message.
  rpc GetConnectorConfig (GetConnectorConfigRequest) returns (GetConnectorConfigResponse);
}

// Input message that defines parameters for [CreateSession](#CreateSession).
message CreateSessionRequest {
  // Mandatory. Connector identifier.
  string connector_id = 1;
  // Mandatory. Specifies the connector type.
  // The connector type should match with the connector type configured in Media Manager.
  ConnectorType connector_type = 2;
  // Optional. Identifier associated to a connector instance.
  string external_connector_id = 3;
  // Optional. This address is only needed for OVS connector.
  // The connector_address must be in the format of "dns://host:port" or "static://ipv4-address:port"
  string connector_address = 4;
}

// Output message that defines parameters returned by [CreateSession](#CreateSession).
message CreateSessionResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The tenant identifier.
  string tenant_id = 2;
  // Connector session identifier.
  string connector_session_id = 3;
  // The current connector configuration.
  ConnectorConfig connector_config = 4;
}

// Input message that defines parameters for [DeleteSession](#DeleteSession).
message DeleteSessionRequest {
  string connector_session_id = 3;  // Required. Connector session identifier.
}

// Output message that defines parameters returned by [DeleteSession](#DeleteSession).
message DeleteSessionResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [StartSession](#StartSession).
// A message that originates from the connector.
message ConnectorMessage {
  oneof connector_message {
    // Required. Connector start session.
    StartSessionRequest start_session_request = 1;

    // Required. Connector status details.
    ConnectorStatusDetails connector_status_details = 2;

    // Required. Connector command response.
    ConnectorCommandResponse connector_command_response = 3;
  }
}

// Message containing connector status details.
message ConnectorStatusDetails {
  // Required. Current connector status.
  ConnectorStatus status = 1;

  // Optional. Connector status details (maximum length 250).
  string status_details = 2;

  // Required. The active connector config identifier.
  string active_connector_config_id = 3;

  // Required. Connector metrics.
  ConnectorMetrics connector_metrics = 4;
}

// Connector command response containing the execution result of a command
message ConnectorCommandResponse {
  // Required. The command identifier. Must match the corresponding command ID from a ConnectorCommand.
  string command_id = 1;

  // Connector response status
  enum Status {
    // The status is not specified.
    STATUS_UNSPECIFIED = 0;

    // The command was executed successfully.
    OK = 1;

    // There was an error executing the command.
    ERROR = 2;
  }

  // Required. The execution status of the command.
  Status status = 2;

  // Optional. A message providing details about the error.
  string message = 3;

  // Corresponding connector command response.
  google.protobuf.Any command_response = 4;
}

// Output message that defines parameters returned by [StartSession](#StartSession).
// A message that originates from Media Manager.
message ConnectorManagerMessage {
  oneof connector_manager_message {
    // Connector start session response.
    StartSessionResponse start_session_response = 1;

    // A command that must be executed by the connector.
    ConnectorCommand connector_command = 2;
  }
}

// Message containing a connector command.
message ConnectorCommand {
  // Required. Unique command ID.
  string command_id = 1;

  // Required. A generic command holder.
  google.protobuf.Any command = 2;

  // Required. The realm ID associated with this command.
  string realm_id = 3;
}


message StatusCommand {
}

// Command that instructs the connector to fetch a new configuration and reinitialize if necessary.
message ReloadConfigCommand {
}

// First message to be sent by the connector after calling StartSession.
message StartSessionRequest {
  // Required. Connector session identifier.
  string connector_session_id = 1;
}

// Start session response message.
message StartSessionResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [GetConnectorConfig](#GetConnectorConfig).
message GetConnectorConfigRequest {
  // Mandatory. Connector identifier.
  string connector_id = 1;
}

// Output message that defines parameters returned by [GetConnectorConfig](#GetConnectorConfig).
message GetConnectorConfigResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The current connector configuration.
  ConnectorConfig connector_config = 2;
}
