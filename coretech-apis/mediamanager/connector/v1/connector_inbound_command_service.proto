/*-
 * #%L
 * media-manager-api-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.connector.v1;

option java_multiple_files = true;
option java_package = "com.nuance.rpc.mediamanager.connector.v1";

import "nuance/mediamanager/connector/v1/cti/cti_connector.proto";
import "nuance/mediamanager/connector/v1/media/media_connector.proto";
import "nuance/mediamanager/connector/v1/connector_resources.proto";
import "nuance/rpc/status.proto";
import "google/protobuf/any.proto";

// CCaaS connectors are expected to implement this service in order to receive the commands from Media Manager.
// A command represents an action or operation to be processed by a connector.
// There are 2 types of commands: MediaConnectorCommand and CtiConnectorCommand.
service ConnectorCommandService {
  // Sends a command to be processed by a connector.
  rpc SendCommand (SendCommandRequest) returns (SendCommandResponse);
}

// Input message that defines parameters for [SendCommand](#SendCommand).
message SendCommandRequest {
  // Mandatory. Tenant's realm ID associated to the connector that processes the command.
  string realm_id = 1;
  // Optional. Implementation-specific information.
  google.protobuf.Any command_context = 2;
  // Mandatory. The connector command to be processed.
  oneof command {
    nuance.mediamanager.connector.v1.media.MediaConnectorCommand media_connector_command = 10;
    nuance.mediamanager.connector.v1.cti.CtiConnectorCommand cti_connector_command = 11;
  }
}

// Output message that defines parameters returned by [SendCommand](#SendCommand).
message SendCommandResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;
  // Optional. Implementation-specific information.
  google.protobuf.Any response_context = 2;
  // Mandatory. The command response returned by the connector.
  oneof command_response {
    nuance.mediamanager.connector.v1.media.MediaConnectorCommandResponse media_connector_command_response = 10;
    nuance.mediamanager.connector.v1.cti.CtiConnectorCommandResponse cti_connector_command_response = 11;
  }
  // Optional. Provides information used for troubleshooting.
  repeated DiagnosticTrace diagnostic_trace = 20;
}
