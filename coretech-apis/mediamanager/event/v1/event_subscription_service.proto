/*-
 * #%L
 * media-manager-api-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.event.v1;

import "nuance/mediamanager/event/v1/event_resources.proto";
import "nuance/rpc/status.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.nuance.rpc.mediamanager.event.v1";

// This service provides operations used for consuming call events or other types of events.
// Event consumers have to invoke the following operations in order to start receiving events:
// 1. CreateEventStream. This operation creates an event stream that will be associated to a dedicated queue used for
//                       publishing events.
// 2. ConsumeEvents. This operation indicates Event Subscription Manager service to start event consumption.
// 3. CreateSubscription. This operation has to be called to receive events for a specific agent extension.
service EventSubscriptionService {
  // Creates an event stream used for event publishing.
  rpc CreateEventStream (CreateEventStreamRequest) returns (CreateEventStreamResponse);

  // Deletes an event stream used for event publishing.
  // This operation must be called when the client no longer needs to receive events.
  // This typically happens when the client shuts down or restarts.
  rpc DeleteEventStream (DeleteEventStreamRequest) returns (DeleteEventStreamResponse);

  // Starts event consumption for a given event stream ID.
  rpc ConsumeEvents (ConsumeEventsRequest) returns (stream ConsumeEventsResponse);

  // Creates an event subscription associated to an agent extension.
  // This operation is called when event monitoring for an agent extension is necessary.
  rpc CreateSubscription (CreateSubscriptionRequest) returns (CreateSubscriptionResponse);

  // Deletes an event subscription associated to an agent extension.
  // This operation must be called when events consumption associated to an agent extension has to stop.
  // This typically happens when an agent signs out in a call center.
  rpc DeleteSubscription (DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse);
}

// Input message that defines parameters for [CreateEventStream](#CreateEventStream).
message CreateEventStreamRequest {
}

// Output message that defines parameters returned by [CreateEventStream](#CreateEventStream).
message CreateEventStreamResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Unique ID of the event stream used to consume events.
  string event_stream_id = 2;
}

// Input message that defines parameters for [DeleteEventStream](#DeleteEventStream).
message DeleteEventStreamRequest {
  // Mandatory. Unique ID that indicates the event stream to delete and to stop event consumption.
  string event_stream_id = 1;
}

// Output message that defines parameters returned by [DeleteEventStream](#DeleteEventStream).
message DeleteEventStreamResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [ConsumeEvents](#ConsumeEvents).
message ConsumeEventsRequest {
  // Mandatory. Unique ID of the event stream used to start consumption events.
  string event_stream_id = 1;
}

// Output message that defines parameters returned by [ConsumeEvents](#ConsumeEvents).
message ConsumeEventsResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // The event associated to a subscription.
  Event event = 2;
  // Date and time of the published event.
  google.protobuf.Timestamp publish_time = 3;
}

// Input message that defines parameters for [CreateSubscription](#CreateSubscription).
message CreateSubscriptionRequest {
  // Mandatory. Tenant's realm ID associated to the subscription.
  string realm_id = 1;
  // Mandatory. Unique ID of the event stream associated to the event subscription.
  string event_stream_id = 2;
  // Optional. Subscription metadata. Metadata is not parsed or interpreted by Media Manager.
  // Itâ€™s passed to the connector as is.
  map<string, string> metadata = 3;
  oneof subscription_info {
    // Mandatory. Identifies the agent.
    AgentInfo agent_info = 10;
  }
}

// Output message that defines parameters returned by [CreateSubscription](#CreateSubscription).
message CreateSubscriptionResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;
  // Mandatory. Unique ID identifying the created subscription.
  string subscription_id = 2;
  // Optional. Provides information used for troubleshooting.
  DiagnosticTrace diagnostic_trace = 3;
}

// Input message that defines parameters for [DeleteSubscription](#DeleteSubscription).
message DeleteSubscriptionRequest {
  // Mandatory. Tenant's realm ID associated to the subscription.
  string realm_id = 1;
  // Mandatory. Unique ID of the subscription to delete.
  string subscription_id = 2;
}

// Output message that defines parameters returned by [DeleteSubscription](#DeleteSubscription).
message DeleteSubscriptionResponse {
  // Mandatory. General operation status.
  nuance.rpc.Status status = 1;
  // Optional. Provides information used for troubleshooting.
  DiagnosticTrace diagnostic_trace = 2;
}
