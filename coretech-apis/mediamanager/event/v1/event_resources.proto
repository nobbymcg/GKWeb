/*-
 * #%L
 * media-manager-api-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.event.v1;

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.nuance.rpc.mediamanager.event.v1";

// Top level container for an event.
message Event {
  // Optional. Unique ID that is generated at the creation of the event.
  string event_id = 1;
  // Mandatory. Tenant's realm ID associated to the event.
  string realm_id = 2;
  // Mandatory. Subscription ID for which the event is destined to.
  string subscription_id = 3;
  // Optional. Date and time of the event to create.
  google.protobuf.Timestamp event_time = 4;
  // Optional. Map of attributes will be attached if matching correlation id is found in Call Start CTI event.
  map<string, string> correlation_attributes = 5;
  oneof event {
    // A call event.
    CallEvent call_event = 10;
    // An agent event.
    AgentEvent agent_event = 11;
    // A subscription event.
    SubscriptionEvent subscription_event = 12;
  }
}

// Data related to a call event.
message CallEvent {
  // Mandatory. Identifies the type of call event such as CALL_STARTED, CALL_HOLD and CALL_CONFERENCE.
  CallEventType event_type = 1;
  // Mandatory. Unique call ID created by the telephony system.
  string call_id = 2;
  // Mandatory. Identifies the type of the call such as CALL_TYPE_INBOUND and CALL_TYPE_INTERNAL.
  CallType call_type = 3;
  // Mandatory. Call info
  CallMetadata call_metadata = 4;
  // Mandatory. The information associated to the agent.
  AgentInfo agent_info = 5;
  // Optional. Attributes associated to a call or call session.
  // Attributes in the map should be specific to the underlying CTI or call API used.
  map<string, string> call_attributes = 7;
  // Optional. Free-form key-value pairs containing custom data.
  // Can be used to pass data that is not supported by the underlying CTI or call API.
  map<string, string> custom_data = 8;
  // Optional. Unique recording ID used as correlation ID with SIPREC.
  // This field is only required when correlation_attributes need to be correlated with this CallEvent.
  string recording_id = 9;
}

// Information associated to an agent.
message AgentEvent {
  // Mandatory. Identifies the agent.
  AgentInfo agent_info = 1;

  // Mandatory. Identifies the agent event type.
  AgentEventType agent_event_type = 2;
}

// Identifies the event type or action associated to a subscription.
enum AgentEventType {
  // Unknown on unspecified event type.
  AGENT_EVENT_TYPE_UNSPECIFIED = 0;
  // The agent logged out from the phone.
  AGENT_LOGOUT = 1;
}

// Provides information about an event that happened concerning a subscription.
message SubscriptionEvent {
  // Identifies the event type or action that occurred.
  SubscriptionEventType subscription_event_type = 1;
  // Provides contextual information about the event. Used for debugging purposes only.
  string event_reason = 2;
  // The agent information associated to the event.
  AgentInfo agent_info = 3;
  // Optional. Provides information used for tracing.
  DiagnosticTrace diagnostic_trace = 4;
}

// Identifies the event type or action associated to a subscription.
enum SubscriptionEventType {
  // Unknown on unspecified event type.
  SUBSCRIPTION_EVENT_TYPE_UNSPECIFIED = 0;
  // Temporary event. An issue happened with the subscription, which may cause the subscription to be out of service.
  SUBSCRIPTION_SUSPENDED = 1;
  // The subscription that was out of service has been recovered.
  SUBSCRIPTION_RESTARTED = 2;
  // The issue with the subscription was unrecoverable so it was terminated.
  SUBSCRIPTION_DELETED = 3;
}

// Provides attributes used to track a call.
message CallMetadata {
  // Optional. ANI
  string ani = 1;
  // Optional. DNIS
  string dnis = 2;
}

// The information associated to a logged in agent.
message AgentInfo {
  // Optional. Agent ID.
  string agent_id = 1;
  // Mandatory. Telephony extension.
  string extension = 2;
}

// Unique call ID created by the telephony system.
message CallIdentifier {
  // Mandatory. The call ID.
  string call_id = 1;
}

// Identifies the type of a call event. Included in [CallEvent](#callevent).
enum CallEventType {
  // Unknown on unspecified call event type.
  CALL_EVENT_UNSPECIFIED = 0;
  // The call has started.
  CALL_STARTED = 1;
  // The call has ended.
  CALL_ENDED = 2;
  // The call was put on hold (pause).
  CALL_HELD = 3;
  // The call was retrieved / resumed from pause.
  CALL_RESUMED = 4;
  // Another party has been added to the call conference.
  CALL_PARTY_ADDED = 5;
  // Another party has been removed from the call conference.
  CALL_PARTY_DELETED = 6;
  // Call data changed. This event type is only required if a [CallEvent](#callevent) contains attached data.
  CALL_DATA_UPDATED = 7;
  // The audio channel information has changed. This event type is optional if recording information is not contained within the [CallEvent](#callevent).
  AUDIO_CHANNEL_CHANGED = 8;
}

// Identifies the type of a call. Included in [CallEvent](#callevent).
enum CallType {
  // Unknown call type.
  CALL_TYPE_UNSPECIFIED = 0;
  // Incoming call from an external party (customer) to an agent.
  CALL_TYPE_INBOUND = 1;
  // Outgoing call from an agent to an external party (customer)
  CALL_TYPE_OUTBOUND = 2;
  // Call occurring with an external party (customer) and an agent but we are not able to differentiate between inbound and outbound calls.
  CALL_TYPE_EXTERNAL = 3;
  // Call with between 2 agents.
  CALL_TYPE_INTERNAL = 4;
  // Internal call occurring with 2 agents. Another call in progress was put on hold.
  CALL_TYPE_CONSULT = 5;
  // Call in progress with an external party that has been transferred to another agent.
  CALL_TYPE_TRANSFER = 6;
  // Call occurring with 2 or more persons, usually agents.
  CALL_TYPE_CONFERENCE = 7;
}

// Provides diagnostic information information about request processing steps.
message DiagnosticTrace {
  // Mandatory. The type of connector involved in the request processing.
  ConnectorType connector_type = 1;
  // Mandatory. The ID of the connector involved in the request processing.
  string connector_id = 2;
  // Mandatory. The ID of the specific connector instance involved in the request processing.
  string external_connector_id = 3;
}

// Listing of valid connector types.
enum ConnectorType {
  // Unspecified connector type.
  CONNECTOR_TYPE_UNSPECIFIED = 0;
  // Media connector.
  CONNECTOR_TYPE_MEDIA = 1;
  // CTI connector.
  CONNECTOR_TYPE_CTI = 2;
  // SIPREC connector. Deprecated.
  CONNECTOR_TYPE_SIPREC = 3;
  // Generic connector.
  CONNECTOR_TYPE_GENERIC = 4;
  // Recording controller connector.
  CONNECTOR_TYPE_RCC = 5;
}
