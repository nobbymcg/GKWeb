/*-
 * #%L
 * media-manager-api-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.media.v1;

import "nuance/rpc/status.proto";
import "google/protobuf/duration.proto";

option java_multiple_files = true;
option java_package = "com.nuance.rpc.mediamanager.media.v1";

// This service provides operations for creating and controlling media segments.
// Creating a media segment does not duplicate the actual media in the blob storage.
service MediaSegmentService {
  // Creates a new media segment of a live media streams with the current start time.
  rpc StartMediaSegment (StartMediaSegmentRequest) returns (StartMediaSegmentResponse);

  // Ends a started media segment with the current end time.
  // A media segment that is not ended is assumed to be till the end of the media.
  rpc EndMediaSegment (EndMediaSegmentRequest) returns (EndMediaSegmentResponse);

  // Creates a new media segment based on an existing one.
  rpc CreateMediaSegment (CreateMediaSegmentRequest) returns (CreateMediaSegmentResponse);
}

// Input message that defines parameters for [StartMediaSegment](#StartMediaSegment).
message StartMediaSegmentRequest {
  // Mandatory. The realm ID to which the media belongs.
  string realm_id = 1;
  // Mandatory. Media URN.
  string media_urn = 2;
}

// Output message that defines parameters returned by [StartMediaSegment](#StartMediaSegment).
message StartMediaSegmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Media URN of the started media segment.
  string segment_media_urn = 2;
}

// Input message that defines parameters for [EndMediaSegment](#EndMediaSegment).
message EndMediaSegmentRequest {
  // Mandatory. The realm ID to which the media belongs.
  string realm_id = 1;
  // Mandatory. Media URN.
  string media_urn = 2;
}

// Output message that defines parameters returned by [EndMediaSegment](#EndMediaSegment).
message EndMediaSegmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
}

// Input message that defines parameters for [CreateMediaSegment](#CreateMediaSegment).
message CreateMediaSegmentRequest {
  // Mandatory. The realm ID to which the media belongs.
  string realm_id = 1;
  // Mandatory. Media URN.
  string media_urn = 2;
  // Mandatory. Start time of the segment.
  google.protobuf.Duration segment_start = 4;
  // Mandatory. End time of the segment.
  google.protobuf.Duration segment_end = 5;
}

// Output message that defines parameters returned by [CreateMediaSegment](#CreateMediaSegment).
message CreateMediaSegmentResponse {
  // General operation status.
  nuance.rpc.Status status = 1;
  // Media URN of the new media segment.
  string segment_media_urn = 2;
}
