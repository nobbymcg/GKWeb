/*-
 * #%L
 * media-manager-api-proto
 * %%
 * Copyright (C) 2021 - 2026 Nuance Communications Inc. All Rights Reserved.
 * %%
 * The copyright to the computer program(s) herein is the property of
 * Nuance Communications Inc. The program(s) may be used and/or copied
 * only with the written permission from Nuance Communications Inc.
 * or in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 * #L%
 */

syntax = "proto3";

package nuance.mediamanager.media.v1;

option java_multiple_files = true;
option java_package = "com.nuance.rpc.mediamanager.media.v1";

// Media container type.
enum Container {
  // Media container not specified.
  CONTAINER_UNSPECIFIED = 0;
  // Raw media with no container.
  CONTAINER_RAW = 1;
  // WAV container.
  CONTAINER_WAV = 2;
  // MP3 audio.
  CONTAINER_MP3 = 3;
}

// Audio type
enum AudioType {
  // Audio type not specified.
  AUDIO_TYPE_UNSPECIFIED = 0;
  // PCM audio type.
  AUDIO_TYPE_PCM = 1;
  // ULAW audio type.
  AUDIO_TYPE_ULAW = 2;
  // ALAW audio type.
  AUDIO_TYPE_ALAW = 3;
  // Mp3 audio type.
  AUDIO_TYPE_MP3 = 4;
  // G729/G729A audio type.
  AUDIO_TYPE_G729 = 5;
}

// Provides information about the media.
message MediaInfo {
  // Media container.
  Container container = 1;
  // Audio information.
  AudioInfo audio_info = 2;
}

// Provides information about the audio.
message AudioInfo {
  // Audio type.
  AudioType audio_type = 1;
  // Number of channels.
  uint32 channels = 2;
  // Audio sample rate.
  uint32 sample_rate_hz = 3;
}

// Message defining the media format used for transcoding.
message MediaFormat {
  // Required. Media container.
  Container container = 1;

  // Optional. Specifies the audio format. If not provided, the original audio format will be returned.
  AudioFormat audio_format = 2;
}

// Message defining the audio format.
message AudioFormat {
  oneof audio_format {
    // Signed 16-bit little endian PCM.
    PCM pcm = 1;
    // G.711 A-law, 8kHz.
    ALaw alaw = 2;
    // G.711 Mu-law, 8kHz.
    ULaw ulaw = 3;
    // Mp3.
    Mp3 mp3 = 4;
    // G729/G729A
    G729 g729 = 5;
  }
  // Number of channels. i.e. mono audios have one channel, while stereo audios usually have 2 channels.
  uint32 num_channels = 100;
}

// Input message defining PCM sample rate.
message PCM {
  // Audio sample rate. Minimum 8000. If not specified, the original sample rate will be returned.
  uint32 sample_rate_hz = 1;
}

// Input message defining ALaw audio format. G.711 audio formats are set to 8kHz.
message ALaw {
}

// Input message defining G729/G729A audio format. G.729/G.729A audio format is set to 8kHz.
message G729 {
}

// Input message defining ULaw audio format. G.711 audio formats are set to 8kHz.
message ULaw {
}

// Input message defining the Mp3 audio format and the transcoding instructions.
message Mp3 {
  enum Target {
    // Target is unspecified.
    TARGET_UNSPECIFIED = 0;
    // Target is quality.
    TARGET_QUALITY = 1;
    // Target is bitrate.
    TARGET_BITRATE = 2;
  }

  // Optional. Optimize for quality or bitrate. If not specified, default is TARGET_QUALITY.
  Target target = 1;
  // Optional. Bitrate in kbit/sec (Only valid if target is bitrate, for CBR one of 8, 16, 24, 32, 40, 48, 56, 64, 80,
  // 96, 112, 128, 160, 192, 224, 256 or 320). If not specified, default is 128.
  uint32 bitrate = 2;
  // Optional. Enforce constant bitrate encoding (Only valid if target is bitrate). Default is false.
  bool cbr = 3;
  // Optional. VBR Quality from 0 to 10, 0 being the best (Only valid if target is quality). If not specified, default is 4.
  float quality = 4;
  // Optional. Enforce mono encoding. Default is false.
  bool mono = 5;

  // Encoding engine quality.
  enum EncodingEngineQuality {
    // Encoding engine quality is not specified
    ENCODING_ENGINE_QUALITY_UNSPECIFIED = 0;
    // Lower quality, but faster encoding speed.
    ENCODING_ENGINE_QUALITY_FAST = 1;
    // Standard quality.
    ENCODING_ENGINE_QUALITY_STANDARD = 2;
    // High quality, but slower encoding speed.
    ENCODING_ENGINE_QUALITY_HIGH = 3;
  }
  // Optional. Quality/speed of the encoding engine, this does not affect the bitrate.
  EncodingEngineQuality encoding_engine_quality = 6;
}

// Input message specifying the channel if only one channel of a stereo media is needed.
message MediaSelector {
  oneof media {
    // Audio selector.
    AudioChannelSelector audioChannelSelector = 1;
    // Future: Video
  }
}

// Message defining audio selector
message AudioChannelSelector {
  // The channel to select. When channel=0 or not specified, all channels will be returned.
  uint32 channel = 1;
}

// Provides diagnostic information information about request processing steps.
message DiagnosticTrace {
  // Mandatory. The type of connector involved in the request processing.
  ConnectorType connector_type = 1;
  // Mandatory. The ID of the connector involved in the request processing.
  string connector_id = 2;
  // Mandatory. The ID of the specific connector instance involved in the request processing.
  string external_connector_id = 3;
}

// Listing of valid connector types.
enum ConnectorType {
  // Unspecified connector type.
  CONNECTOR_TYPE_UNSPECIFIED = 0;
  // Media connector.
  CONNECTOR_TYPE_MEDIA = 1;
  // CTI connector.
  CONNECTOR_TYPE_CTI = 2;
  // SIPREC connector. Deprecated.
  CONNECTOR_TYPE_SIPREC = 3;
  // Generic connector.
  CONNECTOR_TYPE_GENERIC = 4;
  // Recording controller connector.
  CONNECTOR_TYPE_RCC = 5;
}
